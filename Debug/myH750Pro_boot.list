
myH750Pro_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  24000074  08006ed8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000184  08006ed8  00020184  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013416  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000240c  00000000  00000000  000334b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b98  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037186  00000000  00000000  000370e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011366  00000000  00000000  0006e266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bd6c  00000000  00000000  0007f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001db338  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036c4  00000000  00000000  001db388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006db0 	.word	0x08006db0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006db0 	.word	0x08006db0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <MX_GPIO_Init+0xc8>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a2e      	ldr	r2, [pc, #184]	; (800075c <MX_GPIO_Init+0xc8>)
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_GPIO_Init+0xc8>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0xc8>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <MX_GPIO_Init+0xc8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xc8>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xc8>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_GPIO_Init+0xc8>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_GPIO_Init+0xc8>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0xc8>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0xc8>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0xc8>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0xc8>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <MX_GPIO_Init+0xc8>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_GPIO_Init+0xc8>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_GPIO_Init+0xc8>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	4a09      	ldr	r2, [pc, #36]	; (800075c <MX_GPIO_Init+0xc8>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_GPIO_Init+0xc8>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

}
 800074e:	bf00      	nop
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	58024400 	.word	0x58024400

08000760 <JumpToApp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void JumpToApp(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
	void (*AppJump)(void);
	__IO uint32_t AppAddr = 0x90000000;  /* APP ��ַ */
 800076a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f383 8810 	msr	PRIMASK, r3
}
 800077a:	bf00      	nop

	DISABLE_INT();

	HAL_RCC_DeInit();
 800077c:	f002 f926 	bl	80029cc <HAL_RCC_DeInit>

	SysTick->CTRL = 0;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <JumpToApp+0x7c>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <JumpToApp+0x7c>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <JumpToApp+0x7c>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]

	for (i = 0; i < 8; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e010      	b.n	80007ba <JumpToApp+0x5a>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <JumpToApp+0x80>)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3320      	adds	r3, #32
 800079e:	f04f 31ff 	mov.w	r1, #4294967295
 80007a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <JumpToApp+0x80>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3360      	adds	r3, #96	; 0x60
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d9eb      	bls.n	8000798 <JumpToApp+0x38>
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f383 8810 	msr	PRIMASK, r3
}
 80007ca:	bf00      	nop
	}

	ENABLE_INT();

	AppJump = (void (*)(void)) (*((uint32_t *) (AppAddr + 4)));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3304      	adds	r3, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	613b      	str	r3, [r7, #16]

	AppJump();
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4798      	blx	r3

	while (1)
 80007d8:	e7fe      	b.n	80007d8 <JumpToApp+0x78>
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ea:	f000 f942 	bl	8000a72 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <main+0x14c>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d11b      	bne.n	8000832 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007fa:	f3bf 8f4f 	dsb	sy
}
 80007fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000800:	f3bf 8f6f 	isb	sy
}
 8000804:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000806:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <main+0x14c>)
 8000808:	2200      	movs	r2, #0
 800080a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800080e:	f3bf 8f4f 	dsb	sy
}
 8000812:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000814:	f3bf 8f6f 	isb	sy
}
 8000818:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <main+0x14c>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a44      	ldr	r2, [pc, #272]	; (8000930 <main+0x14c>)
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
}
 800082a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082c:	f3bf 8f6f 	isb	sy
}
 8000830:	e000      	b.n	8000834 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000832:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000834:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <main+0x14c>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d138      	bne.n	80008b2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000840:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <main+0x14c>)
 8000842:	2200      	movs	r2, #0
 8000844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <main+0x14c>)
 8000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000854:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	0b5b      	lsrs	r3, r3, #13
 800085a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800085e:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000868:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	015a      	lsls	r2, r3, #5
 800086e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000872:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000878:	492d      	ldr	r1, [pc, #180]	; (8000930 <main+0x14c>)
 800087a:	4313      	orrs	r3, r2
 800087c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	603a      	str	r2, [r7, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ef      	bne.n	800086a <main+0x86>
    } while(sets-- != 0U);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1e5      	bne.n	8000860 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
}
 8000898:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <main+0x14c>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a24      	ldr	r2, [pc, #144]	; (8000930 <main+0x14c>)
 80008a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
}
 80008aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ac:	f3bf 8f6f 	isb	sy
}
 80008b0:	e000      	b.n	80008b4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fed2 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f842 	bl	8000940 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008bc:	f000 f8be 	bl	8000a3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f7ff fee8 	bl	8000694 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80008c4:	f000 f912 	bl	8000aec <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 80008c8:	f000 fdec 	bl	80014a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char* str1 = "boot run.\r\n";
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <main+0x150>)
 80008ce:	617b      	str	r3, [r7, #20]
  HAL_UART_Transmit(&huart1,(uint8_t *)str1, strlen(str1)+1, 1000);
 80008d0:	6978      	ldr	r0, [r7, #20]
 80008d2:	f7ff fd05 	bl	80002e0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3301      	adds	r3, #1
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	6979      	ldr	r1, [r7, #20]
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <main+0x154>)
 80008e6:	f004 fd0d 	bl	8005304 <HAL_UART_Transmit>

  QSPI_FLASH_WriteStatusReg(1,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fc63 	bl	80011b8 <QSPI_FLASH_WriteStatusReg>

  BSP_QSPI_Init();
 80008f2:	f000 faed 	bl	8000ed0 <BSP_QSPI_Init>

  QSPI_EnableMemoryMappedMode();
 80008f6:	f000 fa87 	bl	8000e08 <QSPI_EnableMemoryMappedMode>

  char* str2 = "boot run.\r\n";
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <main+0x150>)
 80008fc:	613b      	str	r3, [r7, #16]
  uint32_t firstByte = *(uint32_t*)0x90000000;
 80008fe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  sprintf(str2,"first Byte :0x%x\r\n",firstByte);
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <main+0x158>)
 800090a:	6938      	ldr	r0, [r7, #16]
 800090c:	f005 fde2 	bl	80064d4 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t *)str2, strlen(str2)+1, 1000);
 8000910:	6938      	ldr	r0, [r7, #16]
 8000912:	f7ff fce5 	bl	80002e0 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29b      	uxth	r3, r3
 800091a:	3301      	adds	r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <main+0x154>)
 8000926:	f004 fced 	bl	8005304 <HAL_UART_Transmit>

  JumpToApp();
 800092a:	f7ff ff19 	bl	8000760 <JumpToApp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x14a>
 8000930:	e000ed00 	.word	0xe000ed00
 8000934:	08006dc8 	.word	0x08006dc8
 8000938:	240000e0 	.word	0x240000e0
 800093c:	08006dd4 	.word	0x08006dd4

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09c      	sub	sp, #112	; 0x70
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	224c      	movs	r2, #76	; 0x4c
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fdb8 	bl	80064c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2220      	movs	r2, #32
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f005 fdb2 	bl	80064c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000960:	2002      	movs	r0, #2
 8000962:	f001 fb33 	bl	8001fcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <SystemClock_Config+0xf4>)
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <SystemClock_Config+0xf4>)
 8000970:	f023 0301 	bic.w	r3, r3, #1
 8000974:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <SystemClock_Config+0xf4>)
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <SystemClock_Config+0xf8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a2c      	ldr	r2, [pc, #176]	; (8000a38 <SystemClock_Config+0xf8>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <SystemClock_Config+0xf8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000998:	bf00      	nop
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <SystemClock_Config+0xf8>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a6:	d1f8      	bne.n	800099a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009a8:	2303      	movs	r3, #3
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	2302      	movs	r3, #2
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009c2:	2305      	movs	r3, #5
 80009c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009d6:	2308      	movs	r3, #8
 80009d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 f91a 	bl	8002c20 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009f2:	f000 f876 	bl	8000ae2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	233f      	movs	r3, #63	; 0x3f
 80009f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2303      	movs	r3, #3
 80009fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a02:	2308      	movs	r3, #8
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fd2d 	bl	800347c <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000a28:	f000 f85b 	bl	8000ae2 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3770      	adds	r7, #112	; 0x70
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58000400 	.word	0x58000400
 8000a38:	58024800 	.word	0x58024800

08000a3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0b0      	sub	sp, #192	; 0xc0
 8000a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	22bc      	movs	r2, #188	; 0xbc
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 fd3b 	bl	80064c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000a4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a52:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f89a 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8000a66:	f000 f83c 	bl	8000ae2 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	37c0      	adds	r7, #192	; 0xc0
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a84:	f000 ff6c 	bl	8001960 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000a90:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000a94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000a96:	230f      	movs	r3, #15
 8000a98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 ff89 	bl	80019d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000ac2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000ac6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	72bb      	strb	r3, [r7, #10]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 ff7e 	bl	80019d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f000 ff5b 	bl	8001990 <HAL_MPU_Enable>

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae6:	b672      	cpsid	i
}
 8000ae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aea:	e7fe      	b.n	8000aea <Error_Handler+0x8>

08000aec <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 0 */
	uint32_t i;
	char *p;
	p = (char *)&hqspi;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000af4:	603b      	str	r3, [r7, #0]
	for (i = 0; i < sizeof(QSPI_HandleTypeDef); i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e007      	b.n	8000b0c <MX_QUADSPI_Init+0x20>
	{
			*p++ = 0;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	603a      	str	r2, [r7, #0]
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(QSPI_HandleTypeDef); i++)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b4b      	cmp	r3, #75	; 0x4b
 8000b10:	d9f4      	bls.n	8000afc <MX_QUADSPI_Init+0x10>
	}
	hqspi.Instance = QUADSPI;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_QUADSPI_Init+0x80>)
 8000b16:	601a      	str	r2, [r3, #0]
	HAL_QSPI_DeInit(&hqspi);
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b1a:	f001 fb05 	bl	8002128 <HAL_QSPI_DeInit>
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_QUADSPI_Init+0x80>)
 8000b22:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b32:	2210      	movs	r2, #16
 8000b34:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b38:	2219      	movs	r2, #25
 8000b3a:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b4c:	2240      	movs	r2, #64	; 0x40
 8000b4e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_QUADSPI_Init+0x7c>)
 8000b52:	f001 fa75 	bl	8002040 <HAL_QSPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_QUADSPI_Init+0x74>
  {
    Error_Handler();
 8000b5c:	f7ff ffc1 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000090 	.word	0x24000090
 8000b6c:	52005000 	.word	0x52005000

08000b70 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0bc      	sub	sp, #240	; 0xf0
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	22bc      	movs	r2, #188	; 0xbc
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 fc97 	bl	80064c4 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a7b      	ldr	r2, [pc, #492]	; (8000d88 <HAL_QSPI_MspInit+0x218>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f040 80ef 	bne.w	8000d80 <HAL_QSPI_MspInit+0x210>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_CLKP;
 8000ba8:	2330      	movs	r3, #48	; 0x30
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 ffef 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000bbc:	f7ff ff91 	bl	8000ae2 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000bc0:	4b72      	ldr	r3, [pc, #456]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000bc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bc6:	4a71      	ldr	r2, [pc, #452]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bd0:	4b6e      	ldr	r3, [pc, #440]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000bd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bde:	4b6b      	ldr	r3, [pc, #428]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a69      	ldr	r2, [pc, #420]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfc:	4b63      	ldr	r3, [pc, #396]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a62      	ldr	r2, [pc, #392]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a53      	ldr	r2, [pc, #332]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <HAL_QSPI_MspInit+0x21c>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000c56:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c70:	2309      	movs	r3, #9
 8000c72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4844      	ldr	r0, [pc, #272]	; (8000d90 <HAL_QSPI_MspInit+0x220>)
 8000c7e:	f000 feeb 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	483a      	ldr	r0, [pc, #232]	; (8000d90 <HAL_QSPI_MspInit+0x220>)
 8000ca8:	f000 fed6 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cac:	23c0      	movs	r3, #192	; 0xc0
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cc4:	2309      	movs	r3, #9
 8000cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4830      	ldr	r0, [pc, #192]	; (8000d94 <HAL_QSPI_MspInit+0x224>)
 8000cd2:	f000 fec1 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <HAL_QSPI_MspInit+0x224>)
 8000cfe:	f000 feab 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d24:	4619      	mov	r1, r3
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <HAL_QSPI_MspInit+0x228>)
 8000d28:	f000 fe96 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d44:	2309      	movs	r3, #9
 8000d46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_QSPI_MspInit+0x228>)
 8000d52:	f000 fe81 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d6e:	2309      	movs	r3, #9
 8000d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <HAL_QSPI_MspInit+0x22c>)
 8000d7c:	f000 fe6c 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	37f0      	adds	r7, #240	; 0xf0
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	52005000 	.word	0x52005000
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58021800 	.word	0x58021800
 8000d94:	58021400 	.word	0x58021400
 8000d98:	58021c00 	.word	0x58021c00
 8000d9c:	58020400 	.word	0x58020400

08000da0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_QSPI_MspDeInit+0x50>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d119      	bne.n	8000de6 <HAL_QSPI_MspDeInit+0x46>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_QSPI_MspDeInit+0x54>)
 8000db4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_QSPI_MspDeInit+0x54>)
 8000dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dbe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_6);
 8000dc2:	f244 2140 	movw	r1, #16960	; 0x4240
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <HAL_QSPI_MspDeInit+0x58>)
 8000dc8:	f000 fff6 	bl	8001db8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8000dcc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <HAL_QSPI_MspDeInit+0x5c>)
 8000dd2:	f000 fff1 	bl	8001db8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_2|GPIO_PIN_3);
 8000dd6:	210c      	movs	r1, #12
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <HAL_QSPI_MspDeInit+0x60>)
 8000dda:	f000 ffed 	bl	8001db8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000dde:	2104      	movs	r1, #4
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <HAL_QSPI_MspDeInit+0x64>)
 8000de2:	f000 ffe9 	bl	8001db8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	52005000 	.word	0x52005000
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58021800 	.word	0x58021800
 8000dfc:	58021400 	.word	0x58021400
 8000e00:	58021c00 	.word	0x58021c00
 8000e04:	58020400 	.word	0x58020400

08000e08 <QSPI_EnableMemoryMappedMode>:

/* USER CODE BEGIN 1 */

uint32_t QSPI_EnableMemoryMappedMode()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	; 0x40
 8000e0c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e12:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD_4BYTE;
 8000e14:	23ec      	movs	r3, #236	; 0xec
 8000e16:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000e18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000e1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e22:	617b      	str	r3, [r7, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000e24:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 6;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c

  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8000e42:	463a      	mov	r2, r7
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <QSPI_EnableMemoryMappedMode+0x5c>)
 8000e4c:	f001 fb90 	bl	8002570 <HAL_QSPI_MemoryMapped>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <QSPI_EnableMemoryMappedMode+0x52>
  {
    return QSPI_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <QSPI_EnableMemoryMappedMode+0x54>
  }

  return QSPI_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3740      	adds	r7, #64	; 0x40
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000090 	.word	0x24000090

08000e68 <QSPI_EnterFourBytesAddress>:

uint8_t QSPI_EnterFourBytesAddress(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e72:	61bb      	str	r3, [r7, #24]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8000e74:	23b7      	movs	r3, #183	; 0xb7
 8000e76:	603b      	str	r3, [r7, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34

  QSPI_WriteEnable();
 8000e94:	f000 f8b0 	bl	8000ff8 <QSPI_WriteEnable>

  if (HAL_QSPI_Command(&hqspi, &s_command,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <QSPI_EnterFourBytesAddress+0x64>)
 8000ea2:	f001 f961 	bl	8002168 <HAL_QSPI_Command>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <QSPI_EnterFourBytesAddress+0x48>
  {
    return QSPI_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e009      	b.n	8000ec4 <QSPI_EnterFourBytesAddress+0x5c>
  }

	if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000eb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eb4:	f000 f8ee 	bl	8001094 <QSPI_AutoPollingMemReady>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <QSPI_EnterFourBytesAddress+0x5a>
	{
		return QSPI_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <QSPI_EnterFourBytesAddress+0x5c>
	}
	return QSPI_OK;
 8000ec2:	2300      	movs	r3, #0

}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000090 	.word	0x24000090

08000ed0 <BSP_QSPI_Init>:

uint8_t BSP_QSPI_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b090      	sub	sp, #64	; 0x40
 8000ed4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	uint16_t value = 0x06;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	80fb      	strh	r3, [r7, #6]

	if (QSPI_WriteEnable() != QSPI_OK)
 8000eda:	f000 f88d 	bl	8000ff8 <QSPI_WriteEnable>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <BSP_QSPI_Init+0x18>
	{
		return QSPI_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e041      	b.n	8000f6c <BSP_QSPI_Init+0x9c>
	}
	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eec:	623b      	str	r3, [r7, #32]
	s_command.Instruction       = WRITE_STATUS_REG1_CMD;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode          = QSPI_DATA_1_LINE;
 8000efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles       = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
	s_command.NbData            = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	; (8000f74 <BSP_QSPI_Init+0xa4>)
 8000f20:	f001 f922 	bl	8002168 <HAL_QSPI_Command>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <BSP_QSPI_Init+0x5e>
	{
		return QSPI_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e01e      	b.n	8000f6c <BSP_QSPI_Init+0x9c>
	}

	if (HAL_QSPI_Transmit(&hqspi, (uint8_t*)&value,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f34:	4619      	mov	r1, r3
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <BSP_QSPI_Init+0xa4>)
 8000f38:	f001 f974 	bl	8002224 <HAL_QSPI_Transmit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <BSP_QSPI_Init+0x76>
	{
		return QSPI_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e012      	b.n	8000f6c <BSP_QSPI_Init+0x9c>
	}

	if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000f46:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f4a:	f000 f8a3 	bl	8001094 <QSPI_AutoPollingMemReady>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <BSP_QSPI_Init+0x88>
	{
		return QSPI_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e009      	b.n	8000f6c <BSP_QSPI_Init+0x9c>
	}
  /* QSPI memory reset */
  if (QSPI_ResetMemory() != QSPI_OK)
 8000f58:	f000 f80e 	bl	8000f78 <QSPI_ResetMemory>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <BSP_QSPI_Init+0x96>
  {
    return QSPI_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e002      	b.n	8000f6c <BSP_QSPI_Init+0x9c>
  }
	QSPI_EnterFourBytesAddress();
 8000f66:	f7ff ff7f 	bl	8000e68 <QSPI_EnterFourBytesAddress>

	return QSPI_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3740      	adds	r7, #64	; 0x40
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24000090 	.word	0x24000090

08000f78 <QSPI_ResetMemory>:
	return QSPI_OK;
}


uint8_t QSPI_ResetMemory()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;

	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	61bb      	str	r3, [r7, #24]
	s_command.Instruction       = RESET_ENABLE_CMD;
 8000f84:	2366      	movs	r3, #102	; 0x66
 8000f86:	603b      	str	r3, [r7, #0]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
	s_command.DataMode          = QSPI_DATA_NONE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DummyCycles       = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000faa:	4619      	mov	r1, r3
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <QSPI_ResetMemory+0x7c>)
 8000fae:	f001 f8db 	bl	8002168 <HAL_QSPI_Command>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <QSPI_ResetMemory+0x44>
	{
		return QSPI_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e017      	b.n	8000fec <QSPI_ResetMemory+0x74>
	}

	s_command.Instruction = RESET_MEMORY_CMD;
 8000fbc:	2399      	movs	r3, #153	; 0x99
 8000fbe:	603b      	str	r3, [r7, #0]
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <QSPI_ResetMemory+0x7c>)
 8000fca:	f001 f8cd 	bl	8002168 <HAL_QSPI_Command>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <QSPI_ResetMemory+0x60>
	{
		return QSPI_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e009      	b.n	8000fec <QSPI_ResetMemory+0x74>
	}

	if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000fd8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fdc:	f000 f85a 	bl	8001094 <QSPI_AutoPollingMemReady>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <QSPI_ResetMemory+0x72>
	{
		return QSPI_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <QSPI_ResetMemory+0x74>
	}
	return QSPI_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3738      	adds	r7, #56	; 0x38
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	24000090 	.word	0x24000090

08000ff8 <QSPI_WriteEnable>:


static uint8_t QSPI_WriteEnable()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef     s_command;
	QSPI_AutoPollingTypeDef s_config;

	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Instruction       = WRITE_ENABLE_CMD;
 8001004:	2306      	movs	r3, #6
 8001006:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DataMode          = QSPI_DATA_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DummyCycles       = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800101c:	2300      	movs	r3, #0
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001020:	2300      	movs	r3, #0
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c

	QSPI_FLASH_Wait_Busy();
 8001024:	f000 f928 	bl	8001278 <QSPI_FLASH_Wait_Busy>

	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001030:	4619      	mov	r1, r3
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <QSPI_WriteEnable+0x98>)
 8001034:	f001 f898 	bl	8002168 <HAL_QSPI_Command>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <QSPI_WriteEnable+0x4a>
	{
		return QSPI_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e021      	b.n	8001086 <QSPI_WriteEnable+0x8e>
	}

	s_config.Match           = W25Q256JV_FSR_WREN;
 8001042:	2302      	movs	r3, #2
 8001044:	603b      	str	r3, [r7, #0]
	s_config.Mask            = W25Q256JV_FSR_WREN;
 8001046:	2302      	movs	r3, #2
 8001048:	607b      	str	r3, [r7, #4]
	s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
	s_config.StatusBytesSize = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	60fb      	str	r3, [r7, #12]
	s_config.Interval        = 0x10;
 8001052:	2310      	movs	r3, #16
 8001054:	60bb      	str	r3, [r7, #8]
	s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	617b      	str	r3, [r7, #20]

	s_command.Instruction    = READ_STATUS_REG1_CMD;
 800105c:	2305      	movs	r3, #5
 800105e:	61bb      	str	r3, [r7, #24]
	s_command.DataMode       = QSPI_DATA_1_LINE;
 8001060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.NbData         = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800106a:	463a      	mov	r2, r7
 800106c:	f107 0118 	add.w	r1, r7, #24
 8001070:	f241 3388 	movw	r3, #5000	; 0x1388
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <QSPI_WriteEnable+0x98>)
 8001076:	f001 fa04 	bl	8002482 <HAL_QSPI_AutoPolling>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <QSPI_WriteEnable+0x8c>
	{
		return QSPI_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <QSPI_WriteEnable+0x8e>
	}
	return QSPI_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000090 	.word	0x24000090

08001094 <QSPI_AutoPollingMemReady>:

static uint8_t QSPI_AutoPollingMemReady(uint32_t Timeout)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b096      	sub	sp, #88	; 0x58
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     s_command;
	QSPI_AutoPollingTypeDef s_config;

	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction       = READ_STATUS_REG1_CMD;
 80010a2:	2305      	movs	r3, #5
 80010a4:	623b      	str	r3, [r7, #32]
	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode          = QSPI_DATA_1_LINE;
 80010ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles       = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80010bc:	2300      	movs	r3, #0
 80010be:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80010c0:	2300      	movs	r3, #0
 80010c2:	657b      	str	r3, [r7, #84]	; 0x54

	s_config.Match           = 0x0000;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
	s_config.Mask            = W25Q256JV_FSR_BUSY;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
	s_config.Interval        = 0x10;
 80010d4:	2310      	movs	r3, #16
 80010d6:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80010d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010dc:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80010de:	f107 0208 	add.w	r2, r7, #8
 80010e2:	f107 0120 	add.w	r1, r7, #32
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <QSPI_AutoPollingMemReady+0x70>)
 80010ea:	f001 f9ca 	bl	8002482 <HAL_QSPI_AutoPolling>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <QSPI_AutoPollingMemReady+0x64>
	{
		return QSPI_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <QSPI_AutoPollingMemReady+0x66>
	}
	return QSPI_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3758      	adds	r7, #88	; 0x58
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000090 	.word	0x24000090

08001108 <QSPI_FLASH_ReadStatusReg>:
		return (id1 + (id2 << 16));
}


uint32_t QSPI_FLASH_ReadStatusReg(uint8_t reg)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	QSPI_CommandTypeDef s_command;
	uint32_t Temp = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t pData[10];


	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(reg == 1)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <QSPI_FLASH_ReadStatusReg+0x20>
	s_command.Instruction       = READ_STATUS_REG1_CMD;
 8001122:	2305      	movs	r3, #5
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <QSPI_FLASH_ReadStatusReg+0x36>
	else if(reg == 2)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d102      	bne.n	8001134 <QSPI_FLASH_ReadStatusReg+0x2c>
	s_command.Instruction       = READ_STATUS_REG2_CMD;
 800112e:	2335      	movs	r3, #53	; 0x35
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e004      	b.n	800113e <QSPI_FLASH_ReadStatusReg+0x36>
	else if(reg == 3)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d101      	bne.n	800113e <QSPI_FLASH_ReadStatusReg+0x36>
	s_command.Instruction       = READ_STATUS_REG3_CMD;
 800113a:	2315      	movs	r3, #21
 800113c:	617b      	str	r3, [r7, #20]

	s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001144:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001148:	623b      	str	r3, [r7, #32]
	s_command.Address           = 0x000000;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode          = QSPI_DATA_1_LINE;
 8001152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles       = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.NbData            = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001164:	2300      	movs	r3, #0
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001168:	2300      	movs	r3, #0
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4619      	mov	r1, r3
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <QSPI_FLASH_ReadStatusReg+0xac>)
 8001178:	f000 fff6 	bl	8002168 <HAL_QSPI_Command>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <QSPI_FLASH_ReadStatusReg+0x7c>
	{
		while(1)
 8001182:	e7fe      	b.n	8001182 <QSPI_FLASH_ReadStatusReg+0x7a>
		{

		}
	}
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4619      	mov	r1, r3
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <QSPI_FLASH_ReadStatusReg+0xac>)
 8001190:	f001 f8da 	bl	8002348 <HAL_QSPI_Receive>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d000      	beq.n	800119c <QSPI_FLASH_ReadStatusReg+0x94>
	{
		while(1)
 800119a:	e7fe      	b.n	800119a <QSPI_FLASH_ReadStatusReg+0x92>
		{

		}
	}

	Temp = pData[1] |( pData[0]<<8 ) ;
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	461a      	mov	r2, r3
 80011a0:	7a3b      	ldrb	r3, [r7, #8]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4313      	orrs	r3, r2
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	return Temp;
 80011a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000090 	.word	0x24000090

080011b8 <QSPI_FLASH_WriteStatusReg>:

uint32_t QSPI_FLASH_WriteStatusReg(uint8_t reg,uint8_t regvalue)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
	QSPI_CommandTypeDef s_command;

	if (QSPI_WriteEnable() != QSPI_OK)
 80011c8:	f7ff ff16 	bl	8000ff8 <QSPI_WriteEnable>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <QSPI_FLASH_WriteStatusReg+0x1e>
	{
		return QSPI_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e049      	b.n	800126a <QSPI_FLASH_WriteStatusReg+0xb2>
	}

	s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	623b      	str	r3, [r7, #32]
	if(reg == 1)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <QSPI_FLASH_WriteStatusReg+0x30>
	s_command.Instruction       = WRITE_STATUS_REG1_CMD;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	e00a      	b.n	80011fe <QSPI_FLASH_WriteStatusReg+0x46>
	else if(reg == 2)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d102      	bne.n	80011f4 <QSPI_FLASH_WriteStatusReg+0x3c>
	s_command.Instruction       = WRITE_STATUS_REG2_CMD;
 80011ee:	2331      	movs	r3, #49	; 0x31
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	e004      	b.n	80011fe <QSPI_FLASH_WriteStatusReg+0x46>
	else if(reg == 3)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d101      	bne.n	80011fe <QSPI_FLASH_WriteStatusReg+0x46>
	s_command.Instruction       = WRITE_STATUS_REG3_CMD;
 80011fa:	2311      	movs	r3, #17
 80011fc:	60bb      	str	r3, [r7, #8]

	s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize       = QSPI_ADDRESS_8_BITS;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
	s_command.Address           = 0x000000;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode          = QSPI_DATA_1_LINE;
 800120e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles       = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
	s_command.NbData            = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4619      	mov	r1, r3
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <QSPI_FLASH_WriteStatusReg+0xbc>)
 8001234:	f000 ff98 	bl	8002168 <HAL_QSPI_Command>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <QSPI_FLASH_WriteStatusReg+0x88>
	{
		while(1)
 800123e:	e7fe      	b.n	800123e <QSPI_FLASH_WriteStatusReg+0x86>
		{

		}
	}
	if (HAL_QSPI_Transmit(&hqspi, &regvalue, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4619      	mov	r1, r3
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <QSPI_FLASH_WriteStatusReg+0xbc>)
 800124a:	f000 ffeb 	bl	8002224 <HAL_QSPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d000      	beq.n	8001256 <QSPI_FLASH_WriteStatusReg+0x9e>
	{
		while(1)
 8001254:	e7fe      	b.n	8001254 <QSPI_FLASH_WriteStatusReg+0x9c>
		{

		}
	}

	if (QSPI_AutoPollingMemReady(W25Q256JV_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8001256:	f44f 7048 	mov.w	r0, #800	; 0x320
 800125a:	f7ff ff1b 	bl	8001094 <QSPI_AutoPollingMemReady>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <QSPI_FLASH_WriteStatusReg+0xb0>
	{
		return QSPI_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <QSPI_FLASH_WriteStatusReg+0xb2>
	}

	return QSPI_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3740      	adds	r7, #64	; 0x40
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000090 	.word	0x24000090

08001278 <QSPI_FLASH_Wait_Busy>:
	HAL_GPIO_Init(QSPI_FLASH_BK1_IO2_PORT, &GPIO_InitStruct);
}


void QSPI_FLASH_Wait_Busy(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint32_t _reg;
	while(1){
		_reg = QSPI_FLASH_ReadStatusReg(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ff42 	bl	8001108 <QSPI_FLASH_ReadStatusReg>
 8001284:	6078      	str	r0, [r7, #4]
		if((_reg & 0x0101)==0) break;
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	f240 1301 	movw	r3, #257	; 0x101
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <QSPI_FLASH_Wait_Busy+0x1c>
		_reg = QSPI_FLASH_ReadStatusReg(1);
 8001292:	e7f4      	b.n	800127e <QSPI_FLASH_Wait_Busy+0x6>
		if((_reg & 0x0101)==0) break;
 8001294:	bf00      	nop
	}
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_MspInit+0x30>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x30>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x30>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	58024400 	.word	0x58024400

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 fa0e 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f005 f88a 	bl	8006470 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	24080000 	.word	0x24080000
 8001388:	00000400 	.word	0x00000400
 800138c:	240000dc 	.word	0x240000dc
 8001390:	24000188 	.word	0x24000188

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <SystemInit+0xe4>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <SystemInit+0xe4>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <SystemInit+0xe8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d807      	bhi.n	80013c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <SystemInit+0xe8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 030f 	bic.w	r3, r3, #15
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <SystemInit+0xe8>)
 80013be:	f043 0307 	orr.w	r3, r3, #7
 80013c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <SystemInit+0xec>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <SystemInit+0xec>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <SystemInit+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <SystemInit+0xec>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4929      	ldr	r1, [pc, #164]	; (8001480 <SystemInit+0xec>)
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <SystemInit+0xf0>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <SystemInit+0xe8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <SystemInit+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 030f 	bic.w	r3, r3, #15
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <SystemInit+0xe8>)
 80013f8:	f043 0307 	orr.w	r3, r3, #7
 80013fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <SystemInit+0xec>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <SystemInit+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <SystemInit+0xec>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <SystemInit+0xec>)
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <SystemInit+0xf4>)
 8001414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <SystemInit+0xec>)
 8001418:	4a1c      	ldr	r2, [pc, #112]	; (800148c <SystemInit+0xf8>)
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <SystemInit+0xec>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <SystemInit+0xfc>)
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <SystemInit+0xec>)
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <SystemInit+0xec>)
 800142a:	4a19      	ldr	r2, [pc, #100]	; (8001490 <SystemInit+0xfc>)
 800142c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <SystemInit+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <SystemInit+0xec>)
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <SystemInit+0xfc>)
 8001438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <SystemInit+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <SystemInit+0xec>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <SystemInit+0xec>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SystemInit+0xec>)
 800144e:	2200      	movs	r2, #0
 8001450:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <SystemInit+0x100>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <SystemInit+0x104>)
 8001458:	4013      	ands	r3, r2
 800145a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800145e:	d202      	bcs.n	8001466 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <SystemInit+0x108>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <SystemInit+0x10c>)
 8001468:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800146c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	52002000 	.word	0x52002000
 8001480:	58024400 	.word	0x58024400
 8001484:	eaf6ed7f 	.word	0xeaf6ed7f
 8001488:	02020200 	.word	0x02020200
 800148c:	01ff0000 	.word	0x01ff0000
 8001490:	01010280 	.word	0x01010280
 8001494:	5c001000 	.word	0x5c001000
 8001498:	ffff0000 	.word	0xffff0000
 800149c:	51008108 	.word	0x51008108
 80014a0:	52004000 	.word	0x52004000

080014a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART1_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014ee:	f003 feb9 	bl	8005264 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff faf3 	bl	8000ae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001500:	f004 feec 	bl	80062dc <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f7ff faea 	bl	8000ae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001512:	f004 ff21 	bl	8006358 <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff fae1 	bl	8000ae2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001522:	f004 fea2 	bl	800626a <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f7ff fad9 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240000e0 	.word	0x240000e0
 8001538:	40011000 	.word	0x40011000

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b8      	sub	sp, #224	; 0xe0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	22bc      	movs	r2, #188	; 0xbc
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f004 ffb1 	bl	80064c4 <memset>
  if(uartHandle->Instance==USART1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_UART_MspInit+0xc0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d142      	bne.n	80015f2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fb0a 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff faac 	bl	8000ae2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_UART_MspInit+0xc4>)
 800158c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_UART_MspInit+0xc4>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0xc4>)
 800159c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80015c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e0:	2307      	movs	r3, #7
 80015e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0xc8>)
 80015ee:	f000 fa33 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	37e0      	adds	r7, #224	; 0xe0
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40011000 	.word	0x40011000
 8001600:	58024400 	.word	0x58024400
 8001604:	58020000 	.word	0x58020000

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800160c:	f7ff fec2 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f004 ff21 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff f8d3 	bl	80007e4 <main>
  bx  lr
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001648:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800164c:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 8001650:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001654:	24000184 	.word	0x24000184

08001658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC3_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 f94a 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001668:	f002 f8be 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_Init+0x68>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <HAL_Init+0x6c>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_Init+0x68>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_Init+0x6c>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x70>)
 800169e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f814 	bl	80016d4 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e002      	b.n	80016bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fdf3 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58024400 	.word	0x58024400
 80016c8:	08006de8 	.word	0x08006de8
 80016cc:	24000004 	.word	0x24000004
 80016d0:	24000000 	.word	0x24000000

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e021      	b.n	800172c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_InitTick+0x64>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_InitTick+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f921 	bl	8001946 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f8f9 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x68>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2400000c 	.word	0x2400000c
 8001738:	24000000 	.word	0x24000000
 800173c:	24000008 	.word	0x24000008

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400000c 	.word	0x2400000c
 8001764:	24000170 	.word	0x24000170

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000170 	.word	0x24000170

08001780 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetREVID+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1b      	lsrs	r3, r3, #16
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	5c001000 	.word	0x5c001000

08001798 <__NVIC_SetPriorityGrouping>:
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x40>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	05fa0000 	.word	0x05fa0000

080017e0 <__NVIC_GetPriorityGrouping>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff47 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb2 	bl	80018b8 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001964:	f3bf 8f5f 	dmb	sy
}
 8001968:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_MPU_Disable+0x28>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_MPU_Disable+0x28>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_MPU_Disable+0x2c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00
 800198c:	e000ed90 	.word	0xe000ed90

08001990 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_MPU_Enable+0x38>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_MPU_Enable+0x3c>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_MPU_Enable+0x3c>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019ae:	f3bf 8f4f 	dsb	sy
}
 80019b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019b4:	f3bf 8f6f 	isb	sy
}
 80019b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed90 	.word	0xe000ed90
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	785a      	ldrb	r2, [r3, #1]
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_MPU_ConfigRegion+0x84>)
 80019de:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d029      	beq.n	8001a3c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_MPU_ConfigRegion+0x84>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7b1b      	ldrb	r3, [r3, #12]
 80019f4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7adb      	ldrb	r3, [r3, #11]
 80019fa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7a9b      	ldrb	r3, [r3, #10]
 8001a02:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7b5b      	ldrb	r3, [r3, #13]
 8001a0a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7b9b      	ldrb	r3, [r3, #14]
 8001a12:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7bdb      	ldrb	r3, [r3, #15]
 8001a1a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7a5b      	ldrb	r3, [r3, #9]
 8001a22:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7a1b      	ldrb	r3, [r3, #8]
 8001a2a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a2c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a36:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a38:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a3a:	e005      	b.n	8001a48 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_MPU_ConfigRegion+0x84>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_MPU_ConfigRegion+0x84>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed90 	.word	0xe000ed90

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_GPIO_Init+0x234>)
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6a:	e194      	b.n	8001d96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8186 	beq.w	8001d90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x44>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 0201 	and.w	r2, r3, #1
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	69b9      	ldr	r1, [r7, #24]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80e0 	beq.w	8001d90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_GPIO_Init+0x238>)
 8001bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <HAL_GPIO_Init+0x238>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_GPIO_Init+0x238>)
 8001be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bee:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_GPIO_Init+0x23c>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <HAL_GPIO_Init+0x240>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d052      	beq.n	8001cc0 <HAL_GPIO_Init+0x268>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_GPIO_Init+0x244>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d031      	beq.n	8001c86 <HAL_GPIO_Init+0x22e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_GPIO_Init+0x248>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x22a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_GPIO_Init+0x24c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_GPIO_Init+0x250>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_GPIO_Init+0x254>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_GPIO_Init+0x258>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_GPIO_Init+0x25c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x260>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_GPIO_Init+0x264>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c62:	2309      	movs	r3, #9
 8001c64:	e02d      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c66:	230a      	movs	r3, #10
 8001c68:	e02b      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	e029      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e027      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e025      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e023      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e021      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e01f      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e01d      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e01b      	b.n	8001cc2 <HAL_GPIO_Init+0x26a>
 8001c8a:	bf00      	nop
 8001c8c:	58000080 	.word	0x58000080
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58000400 	.word	0x58000400
 8001c98:	58020000 	.word	0x58020000
 8001c9c:	58020400 	.word	0x58020400
 8001ca0:	58020800 	.word	0x58020800
 8001ca4:	58020c00 	.word	0x58020c00
 8001ca8:	58021000 	.word	0x58021000
 8001cac:	58021400 	.word	0x58021400
 8001cb0:	58021800 	.word	0x58021800
 8001cb4:	58021c00 	.word	0x58021c00
 8001cb8:	58022000 	.word	0x58022000
 8001cbc:	58022400 	.word	0x58022400
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd2:	4938      	ldr	r1, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x35c>)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f ae63 	bne.w	8001a6c <HAL_GPIO_Init+0x14>
  }
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	3724      	adds	r7, #36	; 0x24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	58000400 	.word	0x58000400

08001db8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dc6:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_GPIO_DeInit+0x1e4>)
 8001dc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001dca:	e0d9      	b.n	8001f80 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80cc 	beq.w	8001f7a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a6f      	ldr	r2, [pc, #444]	; (8001fa0 <HAL_GPIO_DeInit+0x1e8>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a67      	ldr	r2, [pc, #412]	; (8001fa4 <HAL_GPIO_DeInit+0x1ec>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d037      	beq.n	8001e7c <HAL_GPIO_DeInit+0xc4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_GPIO_DeInit+0x1f0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d031      	beq.n	8001e78 <HAL_GPIO_DeInit+0xc0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_GPIO_DeInit+0x1f4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d02b      	beq.n	8001e74 <HAL_GPIO_DeInit+0xbc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a64      	ldr	r2, [pc, #400]	; (8001fb0 <HAL_GPIO_DeInit+0x1f8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d025      	beq.n	8001e70 <HAL_GPIO_DeInit+0xb8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a63      	ldr	r2, [pc, #396]	; (8001fb4 <HAL_GPIO_DeInit+0x1fc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d01f      	beq.n	8001e6c <HAL_GPIO_DeInit+0xb4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a62      	ldr	r2, [pc, #392]	; (8001fb8 <HAL_GPIO_DeInit+0x200>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d019      	beq.n	8001e68 <HAL_GPIO_DeInit+0xb0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a61      	ldr	r2, [pc, #388]	; (8001fbc <HAL_GPIO_DeInit+0x204>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_GPIO_DeInit+0xac>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a60      	ldr	r2, [pc, #384]	; (8001fc0 <HAL_GPIO_DeInit+0x208>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00d      	beq.n	8001e60 <HAL_GPIO_DeInit+0xa8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a5f      	ldr	r2, [pc, #380]	; (8001fc4 <HAL_GPIO_DeInit+0x20c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_DeInit+0xa4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_GPIO_DeInit+0x210>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_GPIO_DeInit+0xa0>
 8001e54:	2309      	movs	r3, #9
 8001e56:	e012      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e58:	230a      	movs	r3, #10
 8001e5a:	e010      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	e00e      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e60:	2307      	movs	r3, #7
 8001e62:	e00c      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e64:	2306      	movs	r3, #6
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_DeInit+0xc6>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d136      	bne.n	8001efc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb8:	4013      	ands	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ede:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <HAL_GPIO_DeInit+0x1e8>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	482c      	ldr	r0, [pc, #176]	; (8001fa0 <HAL_GPIO_DeInit+0x1e8>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2103      	movs	r1, #3
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	08d2      	lsrs	r2, r2, #3
 8001f30:	4019      	ands	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2103      	movs	r1, #3
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	2101      	movs	r1, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f af1f 	bne.w	8001dcc <HAL_GPIO_DeInit+0x14>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	58000080 	.word	0x58000080
 8001fa0:	58000400 	.word	0x58000400
 8001fa4:	58020000 	.word	0x58020000
 8001fa8:	58020400 	.word	0x58020400
 8001fac:	58020800 	.word	0x58020800
 8001fb0:	58020c00 	.word	0x58020c00
 8001fb4:	58021000 	.word	0x58021000
 8001fb8:	58021400 	.word	0x58021400
 8001fbc:	58021800 	.word	0x58021800
 8001fc0:	58021c00 	.word	0x58021c00
 8001fc4:	58022000 	.word	0x58022000
 8001fc8:	58022400 	.word	0x58022400

08001fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d00a      	beq.n	8001ff6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01f      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e01d      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	490f      	ldr	r1, [pc, #60]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002006:	f7ff fbaf 	bl	8001768 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800200c:	e009      	b.n	8002022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800200e:	f7ff fbab 	bl	8001768 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201c:	d901      	bls.n	8002022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e007      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202e:	d1ee      	bne.n	800200e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	58024800 	.word	0x58024800

08002040 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fb8e 	bl	8001768 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e05f      	b.n	8002118 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fd83 	bl	8000b70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800206a:	f241 3188 	movw	r1, #5000	; 0x1388
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fae0 	bl	8002634 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	3b01      	subs	r3, #1
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	2120      	movs	r1, #32
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fad8 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d135      	bne.n	8002116 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_QSPI_Init+0xe0>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6852      	ldr	r2, [r2, #4]
 80020b8:	0611      	lsls	r1, r2, #24
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	69d2      	ldr	r2, [r2, #28]
 80020c4:	4311      	orrs	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6a12      	ldr	r2, [r2, #32]
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_QSPI_Init+0xe4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6912      	ldr	r2, [r2, #16]
 80020e2:	0411      	lsls	r1, r2, #16
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6952      	ldr	r2, [r2, #20]
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6992      	ldr	r2, [r2, #24]
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002116:	7afb      	ldrb	r3, [r7, #11]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	00ffff2f 	.word	0x00ffff2f
 8002124:	ffe0f8fe 	.word	0xffe0f8fe

08002128 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e012      	b.n	8002160 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fe28 	bl	8000da0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff faf8 	bl	8001768 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_QSPI_Command+0x22>
 8002186:	2302      	movs	r3, #2
 8002188:	e048      	b.n	800221c <HAL_QSPI_Command+0xb4>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d137      	bne.n	800220e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2120      	movs	r1, #32
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa4a 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d125      	bne.n	8002212 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80021c6:	2200      	movs	r2, #0
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa77 	bl	80026be <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d115      	bne.n	8002204 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2201      	movs	r2, #1
 80021e0:	2102      	movs	r1, #2
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fa34 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2202      	movs	r2, #2
 80021f8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002202:	e006      	b.n	8002212 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800220c:	e001      	b.n	8002212 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fa98 	bl	8001768 <HAL_GetTick>
 8002238:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3320      	adds	r3, #32
 8002240:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_QSPI_Transmit+0x2e>
 800224e:	2302      	movs	r3, #2
 8002250:	e076      	b.n	8002340 <HAL_QSPI_Transmit+0x11c>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d165      	bne.n	8002332 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d056      	beq.n	8002320 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2212      	movs	r2, #18
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80022a6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80022a8:	e01b      	b.n	80022e2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2201      	movs	r2, #1
 80022b2:	2104      	movs	r1, #4
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f9cb 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80022be:	7ffb      	ldrb	r3, [r7, #31]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1df      	bne.n	80022aa <HAL_QSPI_Transmit+0x86>
 80022ea:	e000      	b.n	80022ee <HAL_QSPI_Transmit+0xca>
          break;
 80022ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d110      	bne.n	8002316 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2201      	movs	r2, #1
 80022fc:	2102      	movs	r1, #2
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f9a6 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002308:	7ffb      	ldrb	r3, [r7, #31]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2202      	movs	r2, #2
 8002314:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800231e:	e00a      	b.n	8002336 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f043 0208 	orr.w	r2, r3, #8
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	e001      	b.n	8002336 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800233e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fa06 	bl	8001768 <HAL_GetTick>
 800235c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3320      	adds	r3, #32
 800236c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_QSPI_Receive+0x36>
 800237a:	2302      	movs	r3, #2
 800237c:	e07d      	b.n	800247a <HAL_QSPI_Receive+0x132>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d16c      	bne.n	800246c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d05d      	beq.n	800245a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2222      	movs	r2, #34	; 0x22
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023d6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80023e0:	e01c      	b.n	800241c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2201      	movs	r2, #1
 80023ea:	2106      	movs	r1, #6
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f92f 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	7812      	ldrb	r2, [r2, #0]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1de      	bne.n	80023e2 <HAL_QSPI_Receive+0x9a>
 8002424:	e000      	b.n	8002428 <HAL_QSPI_Receive+0xe0>
          break;
 8002426:	bf00      	nop
      }

      if (status == HAL_OK)
 8002428:	7ffb      	ldrb	r3, [r7, #31]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d110      	bne.n	8002450 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2201      	movs	r2, #1
 8002436:	2102      	movs	r1, #2
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f909 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2202      	movs	r2, #2
 800244e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002458:	e00a      	b.n	8002470 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
 800246a:	e001      	b.n	8002470 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800246c:	2302      	movs	r3, #2
 800246e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002478:	7ffb      	ldrb	r3, [r7, #31]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af02      	add	r7, sp, #8
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff f96a 	bl	8001768 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_QSPI_AutoPolling+0x24>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e060      	b.n	8002568 <HAL_QSPI_AutoPolling+0xe6>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d14f      	bne.n	800255a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2242      	movs	r2, #66	; 0x42
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2120      	movs	r1, #32
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f8bc 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6852      	ldr	r2, [r2, #4]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002518:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f8c8 	bl	80026be <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2201      	movs	r2, #1
 8002536:	2108      	movs	r1, #8
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f889 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2208      	movs	r2, #8
 800254e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002558:	e001      	b.n	800255e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff f8f4 	bl	8001768 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_QSPI_MemoryMapped+0x22>
 800258e:	2302      	movs	r3, #2
 8002590:	e04c      	b.n	800262c <HAL_QSPI_MemoryMapped+0xbc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d13b      	bne.n	800261e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2282      	movs	r2, #130	; 0x82
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2200      	movs	r2, #0
 80025be:	2120      	movs	r1, #32
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f845 	bl	8002650 <QSPI_WaitFlagStateUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d128      	bne.n	8002622 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0108 	bic.w	r1, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d110      	bne.n	8002610 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800260e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002610:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f851 	bl	80026be <QSPI_Config>
 800261c:	e001      	b.n	8002622 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800261e:	2302      	movs	r3, #2
 8002620:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800262a:	7dfb      	ldrb	r3, [r7, #23]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002660:	e01a      	b.n	8002698 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d016      	beq.n	8002698 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7ff f87d 	bl	8001768 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e00e      	b.n	80026b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1d6      	bne.n	8002662 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <QSPI_Config+0x28>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80026d8:	d005      	beq.n	80026e6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3a01      	subs	r2, #1
 80026e4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80b9 	beq.w	8002862 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05f      	beq.n	80027b8 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d031      	beq.n	800276e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	431a      	orrs	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	431a      	orrs	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	049b      	lsls	r3, r3, #18
 8002726:	431a      	orrs	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	431a      	orrs	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	431a      	orrs	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	431a      	orrs	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	430a      	orrs	r2, r1
 8002756:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800275e:	f000 812e 	beq.w	80029be <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	6852      	ldr	r2, [r2, #4]
 800276a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800276c:	e127      	b.n	80029be <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	431a      	orrs	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	431a      	orrs	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	431a      	orrs	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	431a      	orrs	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	431a      	orrs	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	431a      	orrs	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	ea42 0103 	orr.w	r1, r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	615a      	str	r2, [r3, #20]
}
 80027b6:	e102      	b.n	80029be <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02e      	beq.n	800281e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	049b      	lsls	r3, r3, #18
 80027dc:	431a      	orrs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	ea42 0103 	orr.w	r1, r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	430a      	orrs	r2, r1
 8002806:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800280e:	f000 80d6 	beq.w	80029be <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	6852      	ldr	r2, [r2, #4]
 800281a:	619a      	str	r2, [r3, #24]
}
 800281c:	e0cf      	b.n	80029be <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	431a      	orrs	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	431a      	orrs	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	431a      	orrs	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	431a      	orrs	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	431a      	orrs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	431a      	orrs	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	430a      	orrs	r2, r1
 800285e:	615a      	str	r2, [r3, #20]
}
 8002860:	e0ad      	b.n	80029be <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d058      	beq.n	800291c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02d      	beq.n	80028d8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	431a      	orrs	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	431a      	orrs	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	431a      	orrs	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	049b      	lsls	r3, r3, #18
 8002898:	431a      	orrs	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	ea42 0103 	orr.w	r1, r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80028ca:	d078      	beq.n	80029be <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	6852      	ldr	r2, [r2, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	e072      	b.n	80029be <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	049b      	lsls	r3, r3, #18
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	431a      	orrs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	431a      	orrs	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	ea42 0103 	orr.w	r1, r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	430a      	orrs	r2, r1
 8002918:	615a      	str	r2, [r3, #20]
}
 800291a:	e050      	b.n	80029be <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02a      	beq.n	800297a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	431a      	orrs	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	431a      	orrs	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	431a      	orrs	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	049b      	lsls	r3, r3, #18
 8002940:	431a      	orrs	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	431a      	orrs	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	431a      	orrs	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	ea42 0103 	orr.w	r1, r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800296c:	d027      	beq.n	80029be <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	6852      	ldr	r2, [r2, #4]
 8002976:	619a      	str	r2, [r3, #24]
}
 8002978:	e021      	b.n	80029be <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01d      	beq.n	80029be <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	431a      	orrs	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	431a      	orrs	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	431a      	orrs	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	049b      	lsls	r3, r3, #18
 800299e:	431a      	orrs	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	615a      	str	r2, [r3, #20]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 80029d2:	4b89      	ldr	r3, [pc, #548]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d80f      	bhi.n	80029fe <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80029de:	4b86      	ldr	r3, [pc, #536]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 030f 	bic.w	r3, r3, #15
 80029e6:	4a84      	ldr	r2, [pc, #528]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 80029e8:	f043 0307 	orr.w	r3, r3, #7
 80029ec:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	2b07      	cmp	r3, #7
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0f7      	b.n	8002bee <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029fe:	f7fe feb3 	bl	8001768 <HAL_GetTick>
 8002a02:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a04:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fea9 	bl	8001768 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0e4      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a24:	4b75      	ldr	r3, [pc, #468]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8002a30:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_DeInit+0x234>)
 8002a44:	4a6f      	ldr	r2, [pc, #444]	; (8002c04 <HAL_RCC_DeInit+0x238>)
 8002a46:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_DeInit+0x23c>)
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_RCC_DeInit+0x238>)
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a4e:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_DeInit+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fe3e 	bl	80016d4 <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0c5      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a62:	f7fe fe81 	bl	8001768 <HAL_GetTick>
 8002a66:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe fe7d 	bl	8001768 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0b6      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002a80:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a8c:	f7fe fe6c 	bl	8001768 <HAL_GetTick>
 8002a90:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002a92:	4b5a      	ldr	r3, [pc, #360]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4959      	ldr	r1, [pc, #356]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002a98:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <HAL_RCC_DeInit+0x244>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fe62 	bl	8001768 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e09d      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab2:	4b52      	ldr	r3, [pc, #328]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002abe:	f7fe fe53 	bl	8001768 <HAL_GetTick>
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ace:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fe49 	bl	8001768 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e084      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe fe3a 	bl	8001768 <HAL_GetTick>
 8002af4:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002afc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b00:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fe30 	bl	8001768 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e06b      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b22:	f7fe fe21 	bl	8001768 <HAL_GetTick>
 8002b26:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fe17 	bl	8001768 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e052      	b.n	8002bee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <HAL_RCC_DeInit+0x248>)
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_RCC_DeInit+0x24c>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b74:	4a29      	ldr	r2, [pc, #164]	; (8002c1c <HAL_RCC_DeInit+0x250>)
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_RCC_DeInit+0x250>)
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_RCC_DeInit+0x250>)
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002bb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_RCC_DeInit+0x230>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00f      	beq.n	8002bec <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 030f 	bic.w	r3, r3, #15
 8002bd4:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 8002bd6:	f043 0307 	orr.w	r3, r3, #7
 8002bda:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_DeInit+0x22c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	52002000 	.word	0x52002000
 8002bfc:	58024400 	.word	0x58024400
 8002c00:	24000000 	.word	0x24000000
 8002c04:	03d09000 	.word	0x03d09000
 8002c08:	24000004 	.word	0x24000004
 8002c0c:	24000008 	.word	0x24000008
 8002c10:	fff6ed45 	.word	0xfff6ed45
 8002c14:	02020200 	.word	0x02020200
 8002c18:	01ff0000 	.word	0x01ff0000
 8002c1c:	01010280 	.word	0x01010280

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 bc1d 	b.w	800346e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8087 	beq.w	8002d50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b99      	ldr	r3, [pc, #612]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c4c:	4b96      	ldr	r3, [pc, #600]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_OscConfig+0x48>
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCC_OscConfig+0x60>
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d06c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x12e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d168      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e3f6      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x78>
 8002c8a:	4b87      	ldr	r3, [pc, #540]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a86      	ldr	r2, [pc, #536]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e02e      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x9a>
 8002ca0:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e01d      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0xbe>
 8002cc4:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a77      	ldr	r2, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a74      	ldr	r2, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002cde:	4b72      	ldr	r3, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a71      	ldr	r2, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d013      	beq.n	8002d26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fd33 	bl	8001768 <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fe fd2f 	bl	8001768 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e3aa      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d18:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0xe6>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd1f 	bl	8001768 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fd1b 	bl	8001768 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e396      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x10e>
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80cb 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_RCC_OscConfig+0x164>
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	d156      	bne.n	8002e28 <HAL_RCC_OscConfig+0x208>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d151      	bne.n	8002e28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d84:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x17c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e368      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 0219 	bic.w	r2, r3, #25
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dae:	f7fe fcdb 	bl	8001768 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fcd7 	bl	8001768 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e352      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc8:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	f7fe fcd4 	bl	8001780 <HAL_GetREVID>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d817      	bhi.n	8002e12 <HAL_RCC_OscConfig+0x1f2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1dc>
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfa:	e07b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	4927      	ldr	r1, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e10:	e070      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	4921      	ldr	r1, [pc, #132]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e26:	e065      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d048      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0219 	bic.w	r2, r3, #25
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	491a      	ldr	r1, [pc, #104]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe fc91 	bl	8001768 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fc8d 	bl	8001768 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e308      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	f7fe fc8a 	bl	8001780 <HAL_GetREVID>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d81a      	bhi.n	8002eac <HAL_RCC_OscConfig+0x28c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d108      	bne.n	8002e90 <HAL_RCC_OscConfig+0x270>
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8c:	6053      	str	r3, [r2, #4]
 8002e8e:	e031      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	4902      	ldr	r1, [pc, #8]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e026      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
 8002ea6:	bf00      	nop
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	4b9a      	ldr	r3, [pc, #616]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	4997      	ldr	r1, [pc, #604]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
 8002ec0:	e018      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a94      	ldr	r2, [pc, #592]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fc4b 	bl	8001768 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fc47 	bl	8001768 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2c2      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee8:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a9 	beq.w	8003054 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b85      	ldr	r3, [pc, #532]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f0c:	4b82      	ldr	r3, [pc, #520]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d007      	beq.n	8002f28 <HAL_RCC_OscConfig+0x308>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	d13a      	bne.n	8002f94 <HAL_RCC_OscConfig+0x374>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f28:	4b7b      	ldr	r3, [pc, #492]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x320>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e296      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f40:	f7fe fc1e 	bl	8001780 <HAL_GetREVID>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d817      	bhi.n	8002f7e <HAL_RCC_OscConfig+0x35e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d108      	bne.n	8002f68 <HAL_RCC_OscConfig+0x348>
 8002f56:	4b70      	ldr	r3, [pc, #448]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f5e:	4a6e      	ldr	r2, [pc, #440]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f66:	e075      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	4968      	ldr	r1, [pc, #416]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f7c:	e06a      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f7e:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	4962      	ldr	r1, [pc, #392]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f92:	e05f      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d042      	beq.n	8003022 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fbde 	bl	8001768 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fbda 	bl	8001768 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e255      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fce:	f7fe fbd7 	bl	8001780 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d817      	bhi.n	800300c <HAL_RCC_OscConfig+0x3ec>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3d6>
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fec:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ff2:	6053      	str	r3, [r2, #4]
 8002ff4:	e02e      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	4944      	ldr	r1, [pc, #272]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
 800300a:	e023      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	493f      	ldr	r1, [pc, #252]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
 8003020:	e018      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fb9b 	bl	8001768 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003036:	f7fe fb97 	bl	8001768 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e212      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003048:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d036      	beq.n	80030ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fb78 	bl	8001768 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fb74 	bl	8001768 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1ef      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x45c>
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fb5e 	bl	8001768 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fb5a 	bl	8001768 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1d5      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d039      	beq.n	800314e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fb3b 	bl	8001768 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fb37 	bl	8001768 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1b2      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x4d6>
 8003114:	e01b      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
 8003116:	bf00      	nop
 8003118:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800311c:	4b9b      	ldr	r3, [pc, #620]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a9a      	ldr	r2, [pc, #616]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003126:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003128:	f7fe fb1e 	bl	8001768 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003130:	f7fe fb1a 	bl	8001768 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e195      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003142:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8081 	beq.w	800325e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800315c:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003168:	f7fe fafe 	bl	8001768 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe fafa 	bl	8001768 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e175      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x584>
 8003196:	4b7d      	ldr	r3, [pc, #500]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a7c      	ldr	r2, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e02d      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5a6>
 80031ac:	4b77      	ldr	r3, [pc, #476]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a76      	ldr	r2, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	4b74      	ldr	r3, [pc, #464]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a73      	ldr	r2, [pc, #460]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c8>
 80031ce:	4b6f      	ldr	r3, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a6b      	ldr	r2, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031e8:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a67      	ldr	r2, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a64      	ldr	r2, [pc, #400]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe faae 	bl	8001768 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe faaa 	bl	8001768 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e123      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x5f0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe fa98 	bl	8001768 <HAL_GetTick>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe fa94 	bl	8001768 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e10d      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8102 	beq.w	800346c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003270:	2b18      	cmp	r3, #24
 8003272:	f000 80bd 	beq.w	80033f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 809e 	bne.w	80033bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a41      	ldr	r2, [pc, #260]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fa6c 	bl	8001768 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fa68 	bl	8001768 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e0e3      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b6:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	430a      	orrs	r2, r1
 80032c6:	4931      	ldr	r1, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	628b      	str	r3, [r1, #40]	; 0x28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	3b01      	subs	r3, #1
 80032d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	3b01      	subs	r3, #1
 80032dc:	025b      	lsls	r3, r3, #9
 80032de:	b29b      	uxth	r3, r3
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	3b01      	subs	r3, #1
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032fc:	4923      	ldr	r1, [pc, #140]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x778>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	491b      	ldr	r1, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f023 0202 	bic.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	4912      	ldr	r1, [pc, #72]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800337c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe f9f1 	bl	8001768 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003388:	e011      	b.n	80033ae <HAL_RCC_OscConfig+0x78e>
 800338a:	bf00      	nop
 800338c:	58024400 	.word	0x58024400
 8003390:	58024800 	.word	0x58024800
 8003394:	fffffc0c 	.word	0xfffffc0c
 8003398:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe f9e4 	bl	8001768 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e05f      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x77c>
 80033ba:	e057      	b.n	800346c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe f9ce 	bl	8001768 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe f9ca 	bl	8001768 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e045      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x7b0>
 80033ee:	e03d      	b.n	800346c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d031      	beq.n	8003468 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d12a      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d122      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d11a      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d111      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3730      	adds	r7, #48	; 0x30
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400

0800347c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e19c      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b8a      	ldr	r3, [pc, #552]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d910      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b87      	ldr	r3, [pc, #540]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 020f 	bic.w	r2, r3, #15
 80034a6:	4985      	ldr	r1, [pc, #532]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e184      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d8:	429a      	cmp	r2, r3
 80034da:	d908      	bls.n	80034ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034dc:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4975      	ldr	r1, [pc, #468]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003506:	429a      	cmp	r2, r3
 8003508:	d908      	bls.n	800351c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	496a      	ldr	r1, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003534:	429a      	cmp	r2, r3
 8003536:	d908      	bls.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003538:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	495e      	ldr	r1, [pc, #376]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003546:	4313      	orrs	r3, r2
 8003548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003562:	429a      	cmp	r2, r3
 8003564:	d908      	bls.n	8003578 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4953      	ldr	r1, [pc, #332]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	429a      	cmp	r2, r3
 8003592:	d908      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f023 020f 	bic.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4947      	ldr	r1, [pc, #284]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d055      	beq.n	800365e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4940      	ldr	r1, [pc, #256]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d121      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0f6      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0ea      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0de      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d6      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f023 0207 	bic.w	r2, r3, #7
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe f89b 	bl	8001768 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	e00a      	b.n	800364c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7fe f897 	bl	8001768 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0be      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	429a      	cmp	r2, r3
 800365c:	d1eb      	bne.n	8003636 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	429a      	cmp	r2, r3
 8003678:	d208      	bcs.n	800368c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f023 020f 	bic.w	r2, r3, #15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003688:	4313      	orrs	r3, r2
 800368a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d214      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	4906      	ldr	r1, [pc, #24]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e086      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
 80036bc:	52002000 	.word	0x52002000
 80036c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036dc:	429a      	cmp	r2, r3
 80036de:	d208      	bcs.n	80036f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4939      	ldr	r1, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370a:	429a      	cmp	r2, r3
 800370c:	d208      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	492e      	ldr	r1, [pc, #184]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003738:	429a      	cmp	r2, r3
 800373a:	d208      	bcs.n	800374e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4922      	ldr	r1, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800374a:	4313      	orrs	r3, r2
 800374c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003766:	429a      	cmp	r2, r3
 8003768:	d208      	bcs.n	800377c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4917      	ldr	r1, [pc, #92]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003778:	4313      	orrs	r3, r2
 800377a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800377c:	f000 f834 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	4912      	ldr	r1, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x35c>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <HAL_RCC_ClockConfig+0x35c>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x360>)
 80037b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <HAL_RCC_ClockConfig+0x364>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x368>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd ff88 	bl	80016d4 <HAL_InitTick>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
 80037d8:	08006de8 	.word	0x08006de8
 80037dc:	24000004 	.word	0x24000004
 80037e0:	24000000 	.word	0x24000000
 80037e4:	24000008 	.word	0x24000008

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ee:	4bb3      	ldr	r3, [pc, #716]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f6:	2b18      	cmp	r3, #24
 80037f8:	f200 8155 	bhi.w	8003aa6 <HAL_RCC_GetSysClockFreq+0x2be>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003869 	.word	0x08003869
 8003808:	08003aa7 	.word	0x08003aa7
 800380c:	08003aa7 	.word	0x08003aa7
 8003810:	08003aa7 	.word	0x08003aa7
 8003814:	08003aa7 	.word	0x08003aa7
 8003818:	08003aa7 	.word	0x08003aa7
 800381c:	08003aa7 	.word	0x08003aa7
 8003820:	08003aa7 	.word	0x08003aa7
 8003824:	0800388f 	.word	0x0800388f
 8003828:	08003aa7 	.word	0x08003aa7
 800382c:	08003aa7 	.word	0x08003aa7
 8003830:	08003aa7 	.word	0x08003aa7
 8003834:	08003aa7 	.word	0x08003aa7
 8003838:	08003aa7 	.word	0x08003aa7
 800383c:	08003aa7 	.word	0x08003aa7
 8003840:	08003aa7 	.word	0x08003aa7
 8003844:	08003895 	.word	0x08003895
 8003848:	08003aa7 	.word	0x08003aa7
 800384c:	08003aa7 	.word	0x08003aa7
 8003850:	08003aa7 	.word	0x08003aa7
 8003854:	08003aa7 	.word	0x08003aa7
 8003858:	08003aa7 	.word	0x08003aa7
 800385c:	08003aa7 	.word	0x08003aa7
 8003860:	08003aa7 	.word	0x08003aa7
 8003864:	0800389b 	.word	0x0800389b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003868:	4b94      	ldr	r3, [pc, #592]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003874:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	4a90      	ldr	r2, [pc, #576]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003886:	e111      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003888:	4b8d      	ldr	r3, [pc, #564]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800388a:	61bb      	str	r3, [r7, #24]
    break;
 800388c:	e10e      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800388e:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003890:	61bb      	str	r3, [r7, #24]
    break;
 8003892:	e10b      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003896:	61bb      	str	r3, [r7, #24]
    break;
 8003898:	e108      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038b0:	4b82      	ldr	r3, [pc, #520]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038ba:	4b80      	ldr	r3, [pc, #512]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	08db      	lsrs	r3, r3, #3
 80038c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80e1 	beq.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f000 8083 	beq.w	80039ec <HAL_RCC_GetSysClockFreq+0x204>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f200 80a1 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x248>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x114>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d056      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038fa:	e099      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02d      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a02 	vldr	s12, [r7, #8]
 8003946:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003962:	e087      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b51      	ldr	r3, [pc, #324]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039a6:	e065      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ea:	e043      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2e:	e021      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	3301      	adds	r3, #1
 8003a80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a98:	ee17 3a90 	vmov	r3, s15
 8003a9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa8:	61bb      	str	r3, [r7, #24]
    break;
 8003aaa:	bf00      	nop
  }

  return sysclockfreq;
 8003aac:	69bb      	ldr	r3, [r7, #24]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	03d09000 	.word	0x03d09000
 8003ac4:	003d0900 	.word	0x003d0900
 8003ac8:	017d7840 	.word	0x017d7840
 8003acc:	46000000 	.word	0x46000000
 8003ad0:	4c742400 	.word	0x4c742400
 8003ad4:	4a742400 	.word	0x4a742400
 8003ad8:	4bbebc20 	.word	0x4bbebc20

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ae2:	f7ff fe81 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490f      	ldr	r1, [pc, #60]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	08006de8 	.word	0x08006de8
 8003b34:	24000004 	.word	0x24000004
 8003b38:	24000000 	.word	0x24000000

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b40:	f7ff ffcc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4904      	ldr	r1, [pc, #16]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	08006de8 	.word	0x08006de8

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b6c:	f7ff ffb6 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	08006de8 	.word	0x08006de8

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d03f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb8:	d02a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bbe:	d824      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc4:	d018      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bca:	d81e      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd6:	e018      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4ba3      	ldr	r3, [pc, #652]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4aa2      	ldr	r2, [pc, #648]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003be4:	e015      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f9d5 	bl	8004f9c <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bf6:	e00c      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fa7e 	bl	8005100 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c18:	4b93      	ldr	r3, [pc, #588]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	4990      	ldr	r1, [pc, #576]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	650b      	str	r3, [r1, #80]	; 0x50
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d03d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d826      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c99 	.word	0x08003c99
 8003c5c:	08003c99 	.word	0x08003c99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c6c:	e015      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 f991 	bl	8004f9c <RCCEx_PLL2_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c7e:	e00c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3324      	adds	r3, #36	; 0x24
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fa3a 	bl	8005100 <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
      break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca0:	4b71      	ldr	r3, [pc, #452]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	496e      	ldr	r1, [pc, #440]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cb2:	e001      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d042      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ccc:	d02b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d825      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cd4:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd6:	d028      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8003cda:	d821      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d016      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d81d      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d007      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003cec:	e018      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cee:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cfa:	e017      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f94a 	bl	8004f9c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f9f3 	bl	8005100 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d32:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	494a      	ldr	r1, [pc, #296]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	650b      	str	r3, [r1, #80]	; 0x50
 8003d44:	e001      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d049      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d66:	d82a      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003d6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d72:	d824      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d78:	d018      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d81e      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d88:	d007      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d8a:	e018      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d98:	e017      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f8fb 	bl	8004f9c <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003daa:	e00e      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3324      	adds	r3, #36	; 0x24
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f9a4 	bl	8005100 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e005      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	658b      	str	r3, [r1, #88]	; 0x58
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04b      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e00:	d030      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e06:	d82a      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e0c:	d02e      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e12:	d824      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e18:	d018      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1e:	d81e      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d007      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e38:	e019      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f8ab 	bl	8004f9c <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e010      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3324      	adds	r3, #36	; 0x24
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f954 	bl	8005100 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e5c:	e007      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
      break;
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003e68:	58024400 	.word	0x58024400
      break;
 8003e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e74:	4b99      	ldr	r3, [pc, #612]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e82:	4996      	ldr	r1, [pc, #600]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	658b      	str	r3, [r1, #88]	; 0x58
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d032      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d01c      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d817      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d813      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb6:	4b89      	ldr	r3, [pc, #548]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a88      	ldr	r2, [pc, #544]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ec2:	e00e      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f866 	bl	8004f9c <RCCEx_PLL2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eda:	e002      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ee8:	4b7c      	ldr	r3, [pc, #496]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	4979      	ldr	r1, [pc, #484]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d047      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f14:	d030      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f1a:	d82a      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f20:	d02c      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f26:	d824      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d018      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d81e      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d007      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f40:	4b66      	ldr	r3, [pc, #408]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e017      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f821 	bl	8004f9c <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e00e      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f8ca 	bl	8005100 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f70:	e005      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f84:	4b55      	ldr	r3, [pc, #340]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	4952      	ldr	r1, [pc, #328]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	650b      	str	r3, [r1, #80]	; 0x50
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d049      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb0:	d02e      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb6:	d828      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fbc:	d02a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003fbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fc2:	d822      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fc8:	d026      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fce:	d81c      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fda:	d816      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01d      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d111      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ffd5 	bl	8004f9c <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ff6:	e012      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f87e 	bl	8005100 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004008:	e009      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
      break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004010:	bf00      	nop
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	492a      	ldr	r1, [pc, #168]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004032:	4313      	orrs	r3, r2
 8004034:	650b      	str	r3, [r1, #80]	; 0x50
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d04d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004058:	d828      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d02a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d822      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800406a:	d026      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x526>
 800406c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004070:	d81c      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004076:	d010      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d816      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01d      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004086:	d111      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff84 	bl	8004f9c <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004098:	e012      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f82d 	bl	8005100 <RCCEx_PLL3_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040aa:	e009      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
      break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040d4:	4901      	ldr	r1, [pc, #4]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	658b      	str	r3, [r1, #88]	; 0x58
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80040dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02f      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f8:	d00e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fe:	d814      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004108:	d10f      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410a:	4baf      	ldr	r3, [pc, #700]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	4aae      	ldr	r2, [pc, #696]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ff3c 	bl	8004f9c <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
      break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004138:	4ba3      	ldr	r3, [pc, #652]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	49a0      	ldr	r1, [pc, #640]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004146:	4313      	orrs	r3, r2
 8004148:	650b      	str	r3, [r1, #80]	; 0x50
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d032      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2b03      	cmp	r3, #3
 8004162:	d81b      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	080041a3 	.word	0x080041a3
 8004170:	0800417d 	.word	0x0800417d
 8004174:	0800418b 	.word	0x0800418b
 8004178:	080041a3 	.word	0x080041a3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b92      	ldr	r3, [pc, #584]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4a91      	ldr	r2, [pc, #580]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004188:	e00c      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ff03 	bl	8004f9c <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800419a:	e003      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4984      	ldr	r1, [pc, #528]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8086 	beq.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d0:	4b7e      	ldr	r3, [pc, #504]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7d      	ldr	r2, [pc, #500]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041dc:	f7fd fac4 	bl	8001768 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fd fac0 	bl	8001768 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d902      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	75fb      	strb	r3, [r7, #23]
        break;
 80041f6:	e005      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f8:	4b74      	ldr	r3, [pc, #464]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ef      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d166      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800420a:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800420c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004214:	4053      	eors	r3, r2
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d013      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800421e:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004228:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a66      	ldr	r2, [pc, #408]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a63      	ldr	r2, [pc, #396]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004240:	4a61      	ldr	r2, [pc, #388]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800424c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004250:	d115      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd fa89 	bl	8001768 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004258:	e00b      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fd fa85 	bl	8001768 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d902      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	75fb      	strb	r3, [r7, #23]
            break;
 8004270:	e005      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ed      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d126      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004292:	d10d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004294:	4b4c      	ldr	r3, [pc, #304]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a2:	0919      	lsrs	r1, r3, #4
 80042a4:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	4947      	ldr	r1, [pc, #284]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
 80042ae:	e005      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4a44      	ldr	r2, [pc, #272]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	493f      	ldr	r1, [pc, #252]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	670b      	str	r3, [r1, #112]	; 0x70
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8085 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ee:	2b28      	cmp	r3, #40	; 0x28
 80042f0:	d866      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	080043d5 	.word	0x080043d5
 80042fc:	080043c1 	.word	0x080043c1
 8004300:	080043c1 	.word	0x080043c1
 8004304:	080043c1 	.word	0x080043c1
 8004308:	080043c1 	.word	0x080043c1
 800430c:	080043c1 	.word	0x080043c1
 8004310:	080043c1 	.word	0x080043c1
 8004314:	080043c1 	.word	0x080043c1
 8004318:	0800439d 	.word	0x0800439d
 800431c:	080043c1 	.word	0x080043c1
 8004320:	080043c1 	.word	0x080043c1
 8004324:	080043c1 	.word	0x080043c1
 8004328:	080043c1 	.word	0x080043c1
 800432c:	080043c1 	.word	0x080043c1
 8004330:	080043c1 	.word	0x080043c1
 8004334:	080043c1 	.word	0x080043c1
 8004338:	080043af 	.word	0x080043af
 800433c:	080043c1 	.word	0x080043c1
 8004340:	080043c1 	.word	0x080043c1
 8004344:	080043c1 	.word	0x080043c1
 8004348:	080043c1 	.word	0x080043c1
 800434c:	080043c1 	.word	0x080043c1
 8004350:	080043c1 	.word	0x080043c1
 8004354:	080043c1 	.word	0x080043c1
 8004358:	080043d5 	.word	0x080043d5
 800435c:	080043c1 	.word	0x080043c1
 8004360:	080043c1 	.word	0x080043c1
 8004364:	080043c1 	.word	0x080043c1
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043c1 	.word	0x080043c1
 8004370:	080043c1 	.word	0x080043c1
 8004374:	080043c1 	.word	0x080043c1
 8004378:	080043d5 	.word	0x080043d5
 800437c:	080043c1 	.word	0x080043c1
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d5 	.word	0x080043d5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fdfa 	bl	8004f9c <RCCEx_PLL2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043ac:	e013      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3324      	adds	r3, #36	; 0x24
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fea3 	bl	8005100 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043be:	e00a      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	e007      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043c6:	bf00      	nop
 80043c8:	58024400 	.word	0x58024400
 80043cc:	58024800 	.word	0x58024800
 80043d0:	00ffffcf 	.word	0x00ffffcf
      break;
 80043d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043dc:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e8:	4993      	ldr	r1, [pc, #588]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	654b      	str	r3, [r1, #84]	; 0x54
 80043ee:	e001      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d038      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004404:	2b05      	cmp	r3, #5
 8004406:	d821      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004453 	.word	0x08004453
 8004414:	08004429 	.word	0x08004429
 8004418:	0800443b 	.word	0x0800443b
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fdb4 	bl	8004f9c <RCCEx_PLL2_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004438:	e00c      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	2101      	movs	r1, #1
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fe5d 	bl	8005100 <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
      break;
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f023 0207 	bic.w	r2, r3, #7
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	4974      	ldr	r1, [pc, #464]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	654b      	str	r3, [r1, #84]	; 0x54
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	2b05      	cmp	r3, #5
 8004486:	d821      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044d3 	.word	0x080044d3
 8004494:	080044a9 	.word	0x080044a9
 8004498:	080044bb 	.word	0x080044bb
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd74 	bl	8004f9c <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2101      	movs	r1, #1
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fe1d 	bl	8005100 <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	4953      	ldr	r1, [pc, #332]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	658b      	str	r3, [r1, #88]	; 0x58
 80044ee:	e001      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450a:	d02e      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004510:	d828      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d02a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d822      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800451e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004522:	d026      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004528:	d81c      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800452a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452e:	d010      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d816      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01d      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800453e:	d111      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fd28 	bl	8004f9c <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004550:	e012      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fdd1 	bl	8005100 <RCCEx_PLL3_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004562:	e009      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
      break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800456a:	bf00      	nop
 800456c:	e004      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800456e:	bf00      	nop
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	492a      	ldr	r1, [pc, #168]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	654b      	str	r3, [r1, #84]	; 0x54
 8004592:	e001      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d04d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ae:	d02e      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80045b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045b4:	d828      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d02a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d822      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c6:	d026      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80045c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045cc:	d81c      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d010      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d8:	d816      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01d      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d111      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fcd6 	bl	8004f9c <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045f4:	e012      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd7f 	bl	8005100 <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800461a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004630:	4901      	ldr	r1, [pc, #4]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	658b      	str	r3, [r1, #88]	; 0x58
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d04b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004652:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004656:	d02e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800465c:	d828      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	d02a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d822      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800466a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800466e:	d026      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004670:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004674:	d81c      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467a:	d010      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800467c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004680:	d816      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01d      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc82 	bl	8004f9c <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800469c:	e012      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fd2b 	bl	8005100 <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046ae:	e009      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e006      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046ca:	4b9d      	ldr	r3, [pc, #628]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d8:	4999      	ldr	r1, [pc, #612]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	658b      	str	r3, [r1, #88]	; 0x58
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fcfc 	bl	8005100 <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004712:	4b8b      	ldr	r3, [pc, #556]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	4987      	ldr	r1, [pc, #540]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d10a      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fcdb 	bl	8005100 <RCCEx_PLL3_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004754:	4b7a      	ldr	r3, [pc, #488]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	4977      	ldr	r1, [pc, #476]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004764:	4313      	orrs	r3, r2
 8004766:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d034      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d01d      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004784:	d817      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004790:	e011      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fbff 	bl	8004f9c <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047a2:	e00c      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3324      	adds	r3, #36	; 0x24
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fca8 	bl	8005100 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80047bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c4:	4b5e      	ldr	r3, [pc, #376]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d2:	495b      	ldr	r1, [pc, #364]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	658b      	str	r3, [r1, #88]	; 0x58
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d033      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047f4:	d01c      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80047f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047fa:	d816      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004800:	d003      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004806:	d007      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004808:	e00f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a4c      	ldr	r2, [pc, #304]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004816:	e00c      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3324      	adds	r3, #36	; 0x24
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fc6e 	bl	8005100 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004828:	e003      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
      break;
 800482e:	e000      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	493e      	ldr	r1, [pc, #248]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	654b      	str	r3, [r1, #84]	; 0x54
 800484c:	e001      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d029      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d007      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a33      	ldr	r2, [pc, #204]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800487a:	e00b      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2102      	movs	r1, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fb8a 	bl	8004f9c <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      break;
 8004892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	4926      	ldr	r1, [pc, #152]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048ac:	e001      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3324      	adds	r3, #36	; 0x24
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fc1b 	bl	8005100 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d033      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e8:	d017      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80048ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ee:	d811      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d013      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80048f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fa:	d80b      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004912:	e007      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	75fb      	strb	r3, [r7, #23]
      break;
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004936:	4902      	ldr	r1, [pc, #8]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	654b      	str	r3, [r1, #84]	; 0x54
 800493c:	e004      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	492e      	ldr	r1, [pc, #184]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004962:	4313      	orrs	r3, r2
 8004964:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004980:	4926      	ldr	r1, [pc, #152]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499e:	491f      	ldr	r1, [pc, #124]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049ba:	6113      	str	r3, [r2, #16]
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049c6:	4915      	ldr	r1, [pc, #84]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da08      	bge.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	490e      	ldr	r1, [pc, #56]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	4906      	ldr	r1, [pc, #24]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400

08004a20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a24:	f7ff f85a 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4904      	ldr	r1, [pc, #16]	; (8004a48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	58024400 	.word	0x58024400
 8004a48:	08006de8 	.word	0x08006de8

08004a4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a54:	4ba1      	ldr	r3, [pc, #644]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004a5e:	4b9f      	ldr	r3, [pc, #636]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	0b1b      	lsrs	r3, r3, #12
 8004a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a6a:	4b9c      	ldr	r3, [pc, #624]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a76:	4b99      	ldr	r3, [pc, #612]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8111 	beq.w	8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f000 8083 	beq.w	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f200 80a1 	bhi.w	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d056      	beq.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ab6:	e099      	b.n	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab8:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02d      	beq.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ac4:	4b85      	ldr	r3, [pc, #532]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	08db      	lsrs	r3, r3, #3
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	4a84      	ldr	r2, [pc, #528]	; (8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b1e:	e087      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b62:	e065      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba6:	e043      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bea:	e021      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c56:	ee17 2a90 	vmov	r2, s15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 2a90 	vmov	r2, s15
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb2:	ee17 2a90 	vmov	r2, s15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cba:	e008      	b.n	8004cce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
}
 8004cce:	bf00      	nop
 8004cd0:	3724      	adds	r7, #36	; 0x24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	03d09000 	.word	0x03d09000
 8004ce4:	46000000 	.word	0x46000000
 8004ce8:	4c742400 	.word	0x4c742400
 8004cec:	4a742400 	.word	0x4a742400
 8004cf0:	4bbebc20 	.word	0x4bbebc20

08004cf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cfc:	4ba1      	ldr	r3, [pc, #644]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d06:	4b9f      	ldr	r3, [pc, #636]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	0d1b      	lsrs	r3, r3, #20
 8004d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d12:	4b9c      	ldr	r3, [pc, #624]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d1e:	4b99      	ldr	r3, [pc, #612]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8111 	beq.w	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f000 8083 	beq.w	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d056      	beq.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d5e:	e099      	b.n	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d60:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d02d      	beq.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d6c:	4b85      	ldr	r3, [pc, #532]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	4a84      	ldr	r2, [pc, #528]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dc6:	e087      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e0a:	e065      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e4e:	e043      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e92:	e021      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	0a5b      	lsrs	r3, r3, #9
 8004ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efe:	ee17 2a90 	vmov	r2, s15
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f06:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 2a90 	vmov	r2, s15
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	0e1b      	lsrs	r3, r3, #24
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5a:	ee17 2a90 	vmov	r2, s15
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f62:	e008      	b.n	8004f76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	bf00      	nop
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	03d09000 	.word	0x03d09000
 8004f8c:	46000000 	.word	0x46000000
 8004f90:	4c742400 	.word	0x4c742400
 8004f94:	4a742400 	.word	0x4a742400
 8004f98:	4bbebc20 	.word	0x4bbebc20

08004f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d101      	bne.n	8004fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e099      	b.n	80050ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fba:	4b4f      	ldr	r3, [pc, #316]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4e      	ldr	r2, [pc, #312]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc6:	f7fc fbcf 	bl	8001768 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fce:	f7fc fbcb 	bl	8001768 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e086      	b.n	80050ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe0:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	493f      	ldr	r1, [pc, #252]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	3b01      	subs	r3, #1
 8005006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	3b01      	subs	r3, #1
 8005010:	025b      	lsls	r3, r3, #9
 8005012:	b29b      	uxth	r3, r3
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	3b01      	subs	r3, #1
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005030:	4931      	ldr	r1, [pc, #196]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005036:	4b30      	ldr	r3, [pc, #192]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	492d      	ldr	r1, [pc, #180]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005048:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	f023 0220 	bic.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4928      	ldr	r1, [pc, #160]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800505a:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005060:	f023 0310 	bic.w	r3, r3, #16
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <RCCEx_PLL2_Config+0x160>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	69d2      	ldr	r2, [r2, #28]
 8005072:	00d2      	lsls	r2, r2, #3
 8005074:	4920      	ldr	r1, [pc, #128]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f043 0310 	orr.w	r3, r3, #16
 8005084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005098:	e00f      	b.n	80050ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050ac:	e005      	b.n	80050ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c6:	f7fc fb4f 	bl	8001768 <HAL_GetTick>
 80050ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050ce:	f7fc fb4b 	bl	8001768 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
 80050fc:	ffff0007 	.word	0xffff0007

08005100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800510e:	4b53      	ldr	r3, [pc, #332]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d101      	bne.n	800511e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e099      	b.n	8005252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800511e:	4b4f      	ldr	r3, [pc, #316]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4e      	ldr	r2, [pc, #312]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512a:	f7fc fb1d 	bl	8001768 <HAL_GetTick>
 800512e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005130:	e008      	b.n	8005144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005132:	f7fc fb19 	bl	8001768 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e086      	b.n	8005252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005144:	4b45      	ldr	r3, [pc, #276]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005150:	4b42      	ldr	r3, [pc, #264]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	051b      	lsls	r3, r3, #20
 800515e:	493f      	ldr	r1, [pc, #252]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005160:	4313      	orrs	r3, r2
 8005162:	628b      	str	r3, [r1, #40]	; 0x28
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	3b01      	subs	r3, #1
 8005174:	025b      	lsls	r3, r3, #9
 8005176:	b29b      	uxth	r3, r3
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	3b01      	subs	r3, #1
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005194:	4931      	ldr	r1, [pc, #196]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	492d      	ldr	r1, [pc, #180]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4928      	ldr	r1, [pc, #160]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <RCCEx_PLL3_Config+0x160>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	69d2      	ldr	r2, [r2, #28]
 80051d6:	00d2      	lsls	r2, r2, #3
 80051d8:	4920      	ldr	r1, [pc, #128]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051fc:	e00f      	b.n	800521e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 800520a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800520e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005210:	e005      	b.n	800521e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fc fa9d 	bl	8001768 <HAL_GetTick>
 800522e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005230:	e008      	b.n	8005244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005232:	f7fc fa99 	bl	8001768 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400
 8005260:	ffff0007 	.word	0xffff0007

08005264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e042      	b.n	80052fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fc f957 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2224      	movs	r2, #36	; 0x24
 8005292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8c2 	bl	8005430 <UART_SetConfig>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e022      	b.n	80052fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fe1e 	bl	8005f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fea5 	bl	8006044 <UART_CheckIdleState>
 80052fa:	4603      	mov	r3, r0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 8083 	bne.w	8005426 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_UART_Transmit+0x28>
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e07b      	b.n	8005428 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_UART_Transmit+0x3a>
 800533a:	2302      	movs	r3, #2
 800533c:	e074      	b.n	8005428 <HAL_UART_Transmit+0x124>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2221      	movs	r2, #33	; 0x21
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005356:	f7fc fa07 	bl	8001768 <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005374:	d108      	bne.n	8005388 <HAL_UART_Transmit+0x84>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e003      	b.n	8005390 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005398:	e02c      	b.n	80053f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fe98 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e039      	b.n	8005428 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3302      	adds	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e007      	b.n	80053e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1cc      	bne.n	800539a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fe65 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b092      	sub	sp, #72	; 0x48
 8005436:	af00      	add	r7, sp, #0
 8005438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	431a      	orrs	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	4313      	orrs	r3, r2
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4bbe      	ldr	r3, [pc, #760]	; (8005758 <UART_SetConfig+0x328>)
 8005460:	4013      	ands	r3, r2
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005468:	430b      	orrs	r3, r1
 800546a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4ab3      	ldr	r2, [pc, #716]	; (800575c <UART_SetConfig+0x32c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005498:	4313      	orrs	r3, r2
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4baf      	ldr	r3, [pc, #700]	; (8005760 <UART_SetConfig+0x330>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	f023 010f 	bic.w	r1, r3, #15
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4aa6      	ldr	r2, [pc, #664]	; (8005764 <UART_SetConfig+0x334>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d177      	bne.n	80055c0 <UART_SetConfig+0x190>
 80054d0:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <UART_SetConfig+0x338>)
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d8:	2b28      	cmp	r3, #40	; 0x28
 80054da:	d86d      	bhi.n	80055b8 <UART_SetConfig+0x188>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0xb4>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005589 	.word	0x08005589
 80054e8:	080055b9 	.word	0x080055b9
 80054ec:	080055b9 	.word	0x080055b9
 80054f0:	080055b9 	.word	0x080055b9
 80054f4:	080055b9 	.word	0x080055b9
 80054f8:	080055b9 	.word	0x080055b9
 80054fc:	080055b9 	.word	0x080055b9
 8005500:	080055b9 	.word	0x080055b9
 8005504:	08005591 	.word	0x08005591
 8005508:	080055b9 	.word	0x080055b9
 800550c:	080055b9 	.word	0x080055b9
 8005510:	080055b9 	.word	0x080055b9
 8005514:	080055b9 	.word	0x080055b9
 8005518:	080055b9 	.word	0x080055b9
 800551c:	080055b9 	.word	0x080055b9
 8005520:	080055b9 	.word	0x080055b9
 8005524:	08005599 	.word	0x08005599
 8005528:	080055b9 	.word	0x080055b9
 800552c:	080055b9 	.word	0x080055b9
 8005530:	080055b9 	.word	0x080055b9
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080055b9 	.word	0x080055b9
 800553c:	080055b9 	.word	0x080055b9
 8005540:	080055b9 	.word	0x080055b9
 8005544:	080055a1 	.word	0x080055a1
 8005548:	080055b9 	.word	0x080055b9
 800554c:	080055b9 	.word	0x080055b9
 8005550:	080055b9 	.word	0x080055b9
 8005554:	080055b9 	.word	0x080055b9
 8005558:	080055b9 	.word	0x080055b9
 800555c:	080055b9 	.word	0x080055b9
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055a9 	.word	0x080055a9
 8005568:	080055b9 	.word	0x080055b9
 800556c:	080055b9 	.word	0x080055b9
 8005570:	080055b9 	.word	0x080055b9
 8005574:	080055b9 	.word	0x080055b9
 8005578:	080055b9 	.word	0x080055b9
 800557c:	080055b9 	.word	0x080055b9
 8005580:	080055b9 	.word	0x080055b9
 8005584:	080055b1 	.word	0x080055b1
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e222      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e21e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e21a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e216      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055a8:	2320      	movs	r3, #32
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e212      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055b0:	2340      	movs	r3, #64	; 0x40
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e20e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e20a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a69      	ldr	r2, [pc, #420]	; (800576c <UART_SetConfig+0x33c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d130      	bne.n	800562c <UART_SetConfig+0x1fc>
 80055ca:	4b67      	ldr	r3, [pc, #412]	; (8005768 <UART_SetConfig+0x338>)
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d826      	bhi.n	8005624 <UART_SetConfig+0x1f4>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x1ac>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	08005605 	.word	0x08005605
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005615 	.word	0x08005615
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e1ec      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e1e8      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e1e4      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e1e0      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e1dc      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e1d8      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e1d4      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a4f      	ldr	r2, [pc, #316]	; (8005770 <UART_SetConfig+0x340>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d130      	bne.n	8005698 <UART_SetConfig+0x268>
 8005636:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <UART_SetConfig+0x338>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d826      	bhi.n	8005690 <UART_SetConfig+0x260>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x218>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e1b6      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e1b2      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e1ae      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e1aa      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e1a6      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e1a2      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e19e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a35      	ldr	r2, [pc, #212]	; (8005774 <UART_SetConfig+0x344>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d130      	bne.n	8005704 <UART_SetConfig+0x2d4>
 80056a2:	4b31      	ldr	r3, [pc, #196]	; (8005768 <UART_SetConfig+0x338>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d826      	bhi.n	80056fc <UART_SetConfig+0x2cc>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x284>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056d5 	.word	0x080056d5
 80056bc:	080056dd 	.word	0x080056dd
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e180      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056d4:	2304      	movs	r3, #4
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e17c      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056dc:	2308      	movs	r3, #8
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e178      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e174      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056ec:	2320      	movs	r3, #32
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e170      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e16c      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e168      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <UART_SetConfig+0x348>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d142      	bne.n	8005794 <UART_SetConfig+0x364>
 800570e:	4b16      	ldr	r3, [pc, #88]	; (8005768 <UART_SetConfig+0x338>)
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b05      	cmp	r3, #5
 8005718:	d838      	bhi.n	800578c <UART_SetConfig+0x35c>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x2f0>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005739 	.word	0x08005739
 8005724:	08005741 	.word	0x08005741
 8005728:	08005749 	.word	0x08005749
 800572c:	08005751 	.word	0x08005751
 8005730:	0800577d 	.word	0x0800577d
 8005734:	08005785 	.word	0x08005785
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e14a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e146      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e142      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e13e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005758:	cfff69f3 	.word	0xcfff69f3
 800575c:	58000c00 	.word	0x58000c00
 8005760:	11fff4ff 	.word	0x11fff4ff
 8005764:	40011000 	.word	0x40011000
 8005768:	58024400 	.word	0x58024400
 800576c:	40004400 	.word	0x40004400
 8005770:	40004800 	.word	0x40004800
 8005774:	40004c00 	.word	0x40004c00
 8005778:	40005000 	.word	0x40005000
 800577c:	2320      	movs	r3, #32
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e128      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e124      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e120      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4acb      	ldr	r2, [pc, #812]	; (8005ac8 <UART_SetConfig+0x698>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d176      	bne.n	800588c <UART_SetConfig+0x45c>
 800579e:	4bcb      	ldr	r3, [pc, #812]	; (8005acc <UART_SetConfig+0x69c>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057a6:	2b28      	cmp	r3, #40	; 0x28
 80057a8:	d86c      	bhi.n	8005884 <UART_SetConfig+0x454>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x380>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	08005855 	.word	0x08005855
 80057b4:	08005885 	.word	0x08005885
 80057b8:	08005885 	.word	0x08005885
 80057bc:	08005885 	.word	0x08005885
 80057c0:	08005885 	.word	0x08005885
 80057c4:	08005885 	.word	0x08005885
 80057c8:	08005885 	.word	0x08005885
 80057cc:	08005885 	.word	0x08005885
 80057d0:	0800585d 	.word	0x0800585d
 80057d4:	08005885 	.word	0x08005885
 80057d8:	08005885 	.word	0x08005885
 80057dc:	08005885 	.word	0x08005885
 80057e0:	08005885 	.word	0x08005885
 80057e4:	08005885 	.word	0x08005885
 80057e8:	08005885 	.word	0x08005885
 80057ec:	08005885 	.word	0x08005885
 80057f0:	08005865 	.word	0x08005865
 80057f4:	08005885 	.word	0x08005885
 80057f8:	08005885 	.word	0x08005885
 80057fc:	08005885 	.word	0x08005885
 8005800:	08005885 	.word	0x08005885
 8005804:	08005885 	.word	0x08005885
 8005808:	08005885 	.word	0x08005885
 800580c:	08005885 	.word	0x08005885
 8005810:	0800586d 	.word	0x0800586d
 8005814:	08005885 	.word	0x08005885
 8005818:	08005885 	.word	0x08005885
 800581c:	08005885 	.word	0x08005885
 8005820:	08005885 	.word	0x08005885
 8005824:	08005885 	.word	0x08005885
 8005828:	08005885 	.word	0x08005885
 800582c:	08005885 	.word	0x08005885
 8005830:	08005875 	.word	0x08005875
 8005834:	08005885 	.word	0x08005885
 8005838:	08005885 	.word	0x08005885
 800583c:	08005885 	.word	0x08005885
 8005840:	08005885 	.word	0x08005885
 8005844:	08005885 	.word	0x08005885
 8005848:	08005885 	.word	0x08005885
 800584c:	08005885 	.word	0x08005885
 8005850:	0800587d 	.word	0x0800587d
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e0bc      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e0b8      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e0b4      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e0b0      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005874:	2320      	movs	r3, #32
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e0ac      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e0a8      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e0a4      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a8f      	ldr	r2, [pc, #572]	; (8005ad0 <UART_SetConfig+0x6a0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d130      	bne.n	80058f8 <UART_SetConfig+0x4c8>
 8005896:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <UART_SetConfig+0x69c>)
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d826      	bhi.n	80058f0 <UART_SetConfig+0x4c0>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0x478>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e086      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e082      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e07e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e07a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058e0:	2320      	movs	r3, #32
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e076      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e072      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e06e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <UART_SetConfig+0x6a4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d130      	bne.n	8005964 <UART_SetConfig+0x534>
 8005902:	4b72      	ldr	r3, [pc, #456]	; (8005acc <UART_SetConfig+0x69c>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b05      	cmp	r3, #5
 800590c:	d826      	bhi.n	800595c <UART_SetConfig+0x52c>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x4e4>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005935 	.word	0x08005935
 800591c:	0800593d 	.word	0x0800593d
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	2300      	movs	r3, #0
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e050      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e04c      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e048      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e044      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800594c:	2320      	movs	r3, #32
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e040      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e03c      	b.n	80059d6 <UART_SetConfig+0x5a6>
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e038      	b.n	80059d6 <UART_SetConfig+0x5a6>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5b      	ldr	r2, [pc, #364]	; (8005ad8 <UART_SetConfig+0x6a8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d130      	bne.n	80059d0 <UART_SetConfig+0x5a0>
 800596e:	4b57      	ldr	r3, [pc, #348]	; (8005acc <UART_SetConfig+0x69c>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	2b05      	cmp	r3, #5
 8005978:	d826      	bhi.n	80059c8 <UART_SetConfig+0x598>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x550>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005999 	.word	0x08005999
 8005984:	080059a1 	.word	0x080059a1
 8005988:	080059a9 	.word	0x080059a9
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	2302      	movs	r3, #2
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e01a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e016      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e012      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e00e      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059b8:	2320      	movs	r3, #32
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e00a      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e006      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e002      	b.n	80059d6 <UART_SetConfig+0x5a6>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <UART_SetConfig+0x6a8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	f040 80f8 	bne.w	8005bd2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	dc46      	bgt.n	8005a78 <UART_SetConfig+0x648>
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	f2c0 8082 	blt.w	8005af4 <UART_SetConfig+0x6c4>
 80059f0:	3b02      	subs	r3, #2
 80059f2:	2b1e      	cmp	r3, #30
 80059f4:	d87e      	bhi.n	8005af4 <UART_SetConfig+0x6c4>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0x5cc>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a7f 	.word	0x08005a7f
 8005a00:	08005af5 	.word	0x08005af5
 8005a04:	08005a87 	.word	0x08005a87
 8005a08:	08005af5 	.word	0x08005af5
 8005a0c:	08005af5 	.word	0x08005af5
 8005a10:	08005af5 	.word	0x08005af5
 8005a14:	08005a97 	.word	0x08005a97
 8005a18:	08005af5 	.word	0x08005af5
 8005a1c:	08005af5 	.word	0x08005af5
 8005a20:	08005af5 	.word	0x08005af5
 8005a24:	08005af5 	.word	0x08005af5
 8005a28:	08005af5 	.word	0x08005af5
 8005a2c:	08005af5 	.word	0x08005af5
 8005a30:	08005af5 	.word	0x08005af5
 8005a34:	08005aa7 	.word	0x08005aa7
 8005a38:	08005af5 	.word	0x08005af5
 8005a3c:	08005af5 	.word	0x08005af5
 8005a40:	08005af5 	.word	0x08005af5
 8005a44:	08005af5 	.word	0x08005af5
 8005a48:	08005af5 	.word	0x08005af5
 8005a4c:	08005af5 	.word	0x08005af5
 8005a50:	08005af5 	.word	0x08005af5
 8005a54:	08005af5 	.word	0x08005af5
 8005a58:	08005af5 	.word	0x08005af5
 8005a5c:	08005af5 	.word	0x08005af5
 8005a60:	08005af5 	.word	0x08005af5
 8005a64:	08005af5 	.word	0x08005af5
 8005a68:	08005af5 	.word	0x08005af5
 8005a6c:	08005af5 	.word	0x08005af5
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005ae7 	.word	0x08005ae7
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d037      	beq.n	8005aec <UART_SetConfig+0x6bc>
 8005a7c:	e03a      	b.n	8005af4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a7e:	f7fe ffcf 	bl	8004a20 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a84:	e03c      	b.n	8005b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe ffde 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a94:	e034      	b.n	8005b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f92a 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aa4:	e02c      	b.n	8005b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <UART_SetConfig+0x69c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <UART_SetConfig+0x69c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	08db      	lsrs	r3, r3, #3
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	4a07      	ldr	r2, [pc, #28]	; (8005adc <UART_SetConfig+0x6ac>)
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ac4:	e01c      	b.n	8005b00 <UART_SetConfig+0x6d0>
 8005ac6:	bf00      	nop
 8005ac8:	40011400 	.word	0x40011400
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	40007800 	.word	0x40007800
 8005ad4:	40007c00 	.word	0x40007c00
 8005ad8:	58000c00 	.word	0x58000c00
 8005adc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ae0:	4b9d      	ldr	r3, [pc, #628]	; (8005d58 <UART_SetConfig+0x928>)
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae4:	e00c      	b.n	8005b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ae6:	4b9d      	ldr	r3, [pc, #628]	; (8005d5c <UART_SetConfig+0x92c>)
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aea:	e009      	b.n	8005b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af2:	e005      	b.n	8005b00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005afe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 81de 	beq.w	8005ec4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	4a94      	ldr	r2, [pc, #592]	; (8005d60 <UART_SetConfig+0x930>)
 8005b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d305      	bcc.n	8005b38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d903      	bls.n	8005b40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b3e:	e1c1      	b.n	8005ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	2200      	movs	r2, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	4a84      	ldr	r2, [pc, #528]	; (8005d60 <UART_SetConfig+0x930>)
 8005b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2200      	movs	r2, #0
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b62:	f7fa fc15 	bl	8000390 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	020b      	lsls	r3, r1, #8
 8005b78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b7c:	0202      	lsls	r2, r0, #8
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	6849      	ldr	r1, [r1, #4]
 8005b82:	0849      	lsrs	r1, r1, #1
 8005b84:	2000      	movs	r0, #0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4605      	mov	r5, r0
 8005b8a:	eb12 0804 	adds.w	r8, r2, r4
 8005b8e:	eb43 0905 	adc.w	r9, r3, r5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	469a      	mov	sl, r3
 8005b9a:	4693      	mov	fp, r2
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fbf4 	bl	8000390 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb6:	d308      	bcc.n	8005bca <UART_SetConfig+0x79a>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d204      	bcs.n	8005bca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e17c      	b.n	8005ec4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bd0:	e178      	b.n	8005ec4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bda:	f040 80c5 	bne.w	8005d68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005bde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	dc48      	bgt.n	8005c78 <UART_SetConfig+0x848>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db7b      	blt.n	8005ce2 <UART_SetConfig+0x8b2>
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d879      	bhi.n	8005ce2 <UART_SetConfig+0x8b2>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0x7c4>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c7f 	.word	0x08005c7f
 8005bf8:	08005c87 	.word	0x08005c87
 8005bfc:	08005ce3 	.word	0x08005ce3
 8005c00:	08005ce3 	.word	0x08005ce3
 8005c04:	08005c8f 	.word	0x08005c8f
 8005c08:	08005ce3 	.word	0x08005ce3
 8005c0c:	08005ce3 	.word	0x08005ce3
 8005c10:	08005ce3 	.word	0x08005ce3
 8005c14:	08005c9f 	.word	0x08005c9f
 8005c18:	08005ce3 	.word	0x08005ce3
 8005c1c:	08005ce3 	.word	0x08005ce3
 8005c20:	08005ce3 	.word	0x08005ce3
 8005c24:	08005ce3 	.word	0x08005ce3
 8005c28:	08005ce3 	.word	0x08005ce3
 8005c2c:	08005ce3 	.word	0x08005ce3
 8005c30:	08005ce3 	.word	0x08005ce3
 8005c34:	08005caf 	.word	0x08005caf
 8005c38:	08005ce3 	.word	0x08005ce3
 8005c3c:	08005ce3 	.word	0x08005ce3
 8005c40:	08005ce3 	.word	0x08005ce3
 8005c44:	08005ce3 	.word	0x08005ce3
 8005c48:	08005ce3 	.word	0x08005ce3
 8005c4c:	08005ce3 	.word	0x08005ce3
 8005c50:	08005ce3 	.word	0x08005ce3
 8005c54:	08005ce3 	.word	0x08005ce3
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005ce3 	.word	0x08005ce3
 8005c60:	08005ce3 	.word	0x08005ce3
 8005c64:	08005ce3 	.word	0x08005ce3
 8005c68:	08005ce3 	.word	0x08005ce3
 8005c6c:	08005ce3 	.word	0x08005ce3
 8005c70:	08005ce3 	.word	0x08005ce3
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d02e      	beq.n	8005cda <UART_SetConfig+0x8aa>
 8005c7c:	e031      	b.n	8005ce2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fd ff5d 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8005c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c84:	e033      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c86:	f7fd ff6f 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8005c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c8c:	e02f      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe feda 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9c:	e027      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c9e:	f107 0318 	add.w	r3, r7, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f826 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cac:	e01f      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cae:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <UART_SetConfig+0x934>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cba:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <UART_SetConfig+0x934>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	08db      	lsrs	r3, r3, #3
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <UART_SetConfig+0x928>)
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ccc:	e00f      	b.n	8005cee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <UART_SetConfig+0x928>)
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd2:	e00c      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cd4:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <UART_SetConfig+0x92c>)
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd8:	e009      	b.n	8005cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce0:	e005      	b.n	8005cee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80e7 	beq.w	8005ec4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <UART_SetConfig+0x930>)
 8005cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d08:	005a      	lsls	r2, r3, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	441a      	add	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	d916      	bls.n	8005d50 <UART_SetConfig+0x920>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d28:	d212      	bcs.n	8005d50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f023 030f 	bic.w	r3, r3, #15
 8005d32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d42:	4313      	orrs	r3, r2
 8005d44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	e0b9      	b.n	8005ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d56:	e0b5      	b.n	8005ec4 <UART_SetConfig+0xa94>
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	003d0900 	.word	0x003d0900
 8005d60:	08006df8 	.word	0x08006df8
 8005d64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	dc49      	bgt.n	8005e04 <UART_SetConfig+0x9d4>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db7c      	blt.n	8005e6e <UART_SetConfig+0xa3e>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d87a      	bhi.n	8005e6e <UART_SetConfig+0xa3e>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x950>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005e0b 	.word	0x08005e0b
 8005d84:	08005e13 	.word	0x08005e13
 8005d88:	08005e6f 	.word	0x08005e6f
 8005d8c:	08005e6f 	.word	0x08005e6f
 8005d90:	08005e1b 	.word	0x08005e1b
 8005d94:	08005e6f 	.word	0x08005e6f
 8005d98:	08005e6f 	.word	0x08005e6f
 8005d9c:	08005e6f 	.word	0x08005e6f
 8005da0:	08005e2b 	.word	0x08005e2b
 8005da4:	08005e6f 	.word	0x08005e6f
 8005da8:	08005e6f 	.word	0x08005e6f
 8005dac:	08005e6f 	.word	0x08005e6f
 8005db0:	08005e6f 	.word	0x08005e6f
 8005db4:	08005e6f 	.word	0x08005e6f
 8005db8:	08005e6f 	.word	0x08005e6f
 8005dbc:	08005e6f 	.word	0x08005e6f
 8005dc0:	08005e3b 	.word	0x08005e3b
 8005dc4:	08005e6f 	.word	0x08005e6f
 8005dc8:	08005e6f 	.word	0x08005e6f
 8005dcc:	08005e6f 	.word	0x08005e6f
 8005dd0:	08005e6f 	.word	0x08005e6f
 8005dd4:	08005e6f 	.word	0x08005e6f
 8005dd8:	08005e6f 	.word	0x08005e6f
 8005ddc:	08005e6f 	.word	0x08005e6f
 8005de0:	08005e6f 	.word	0x08005e6f
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005e6f 	.word	0x08005e6f
 8005dec:	08005e6f 	.word	0x08005e6f
 8005df0:	08005e6f 	.word	0x08005e6f
 8005df4:	08005e6f 	.word	0x08005e6f
 8005df8:	08005e6f 	.word	0x08005e6f
 8005dfc:	08005e6f 	.word	0x08005e6f
 8005e00:	08005e61 	.word	0x08005e61
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d02e      	beq.n	8005e66 <UART_SetConfig+0xa36>
 8005e08:	e031      	b.n	8005e6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fd fe97 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8005e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e10:	e033      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e12:	f7fd fea9 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8005e16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e18:	e02f      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fe14 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e28:	e027      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ff60 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e38:	e01f      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <UART_SetConfig+0xac0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <UART_SetConfig+0xac0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <UART_SetConfig+0xac4>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e58:	e00f      	b.n	8005e7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <UART_SetConfig+0xac4>)
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e5e:	e00c      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e60:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <UART_SetConfig+0xac8>)
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e6c:	e005      	b.n	8005e7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e78:	bf00      	nop
    }

    if (pclk != 0U)
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d021      	beq.n	8005ec4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <UART_SetConfig+0xacc>)
 8005e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d909      	bls.n	8005ebe <UART_SetConfig+0xa8e>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d205      	bcs.n	8005ebe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
 8005ebc:	e002      	b.n	8005ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ee0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3748      	adds	r7, #72	; 0x48
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eee:	bf00      	nop
 8005ef0:	58024400 	.word	0x58024400
 8005ef4:	03d09000 	.word	0x03d09000
 8005ef8:	003d0900 	.word	0x003d0900
 8005efc:	08006df8 	.word	0x08006df8

08005f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01a      	beq.n	8006016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d10a      	bne.n	8006016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006054:	f7fb fb88 	bl	8001768 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b08      	cmp	r3, #8
 8006066:	d10e      	bne.n	8006086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f82f 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e025      	b.n	80060d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b04      	cmp	r3, #4
 8006092:	d10e      	bne.n	80060b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f819 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e00f      	b.n	80060d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b09c      	sub	sp, #112	; 0x70
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ea:	e0a9      	b.n	8006240 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	f000 80a5 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f6:	f7fb fb37 	bl	8001768 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006102:	429a      	cmp	r2, r3
 8006104:	d302      	bcc.n	800610c <UART_WaitOnFlagUntilTimeout+0x32>
 8006106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006108:	2b00      	cmp	r3, #0
 800610a:	d140      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006120:	667b      	str	r3, [r7, #100]	; 0x64
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800612a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e6      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	663b      	str	r3, [r7, #96]	; 0x60
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800615e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e5      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e069      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d051      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061aa:	d149      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	637b      	str	r3, [r7, #52]	; 0x34
 80061d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e6      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	613b      	str	r3, [r7, #16]
   return(result);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006208:	623a      	str	r2, [r7, #32]
 800620a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	6a3a      	ldr	r2, [r7, #32]
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	61bb      	str	r3, [r7, #24]
   return(result);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e5      	bne.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e010      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	429a      	cmp	r2, r3
 800625c:	f43f af46 	beq.w	80060ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3770      	adds	r7, #112	; 0x70
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UARTEx_DisableFifoMode+0x16>
 800627c:	2302      	movs	r3, #2
 800627e:	e027      	b.n	80062d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e02d      	b.n	8006350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f84f 	bl	80063d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800636c:	2302      	movs	r3, #2
 800636e:	e02d      	b.n	80063cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	; 0x24
 800637c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f811 	bl	80063d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063f4:	e031      	b.n	800645a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063f6:	2310      	movs	r3, #16
 80063f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063fa:	2310      	movs	r3, #16
 80063fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0e5b      	lsrs	r3, r3, #25
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	0f5b      	lsrs	r3, r3, #29
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	7b3a      	ldrb	r2, [r7, #12]
 8006422:	4911      	ldr	r1, [pc, #68]	; (8006468 <UARTEx_SetNbDataToProcess+0x94>)
 8006424:	5c8a      	ldrb	r2, [r1, r2]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800642a:	7b3a      	ldrb	r2, [r7, #12]
 800642c:	490f      	ldr	r1, [pc, #60]	; (800646c <UARTEx_SetNbDataToProcess+0x98>)
 800642e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006430:	fb93 f3f2 	sdiv	r3, r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	7b7a      	ldrb	r2, [r7, #13]
 8006440:	4909      	ldr	r1, [pc, #36]	; (8006468 <UARTEx_SetNbDataToProcess+0x94>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
 8006444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006448:	7b7a      	ldrb	r2, [r7, #13]
 800644a:	4908      	ldr	r1, [pc, #32]	; (800646c <UARTEx_SetNbDataToProcess+0x98>)
 800644c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800644e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	08006e10 	.word	0x08006e10
 800646c:	08006e18 	.word	0x08006e18

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	; (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	24000010 	.word	0x24000010

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4d0d      	ldr	r5, [pc, #52]	; (80064b4 <__libc_init_array+0x38>)
 8006480:	4c0d      	ldr	r4, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	2600      	movs	r6, #0
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	4d0b      	ldr	r5, [pc, #44]	; (80064bc <__libc_init_array+0x40>)
 800648e:	4c0c      	ldr	r4, [pc, #48]	; (80064c0 <__libc_init_array+0x44>)
 8006490:	f000 fc8e 	bl	8006db0 <_init>
 8006494:	1b64      	subs	r4, r4, r5
 8006496:	10a4      	asrs	r4, r4, #2
 8006498:	2600      	movs	r6, #0
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	08006e5c 	.word	0x08006e5c
 80064b8:	08006e5c 	.word	0x08006e5c
 80064bc:	08006e5c 	.word	0x08006e5c
 80064c0:	08006e60 	.word	0x08006e60

080064c4 <memset>:
 80064c4:	4402      	add	r2, r0
 80064c6:	4603      	mov	r3, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	f803 1b01 	strb.w	r1, [r3], #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <siprintf>:
 80064d4:	b40e      	push	{r1, r2, r3}
 80064d6:	b500      	push	{lr}
 80064d8:	b09c      	sub	sp, #112	; 0x70
 80064da:	ab1d      	add	r3, sp, #116	; 0x74
 80064dc:	9002      	str	r0, [sp, #8]
 80064de:	9006      	str	r0, [sp, #24]
 80064e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064e4:	4809      	ldr	r0, [pc, #36]	; (800650c <siprintf+0x38>)
 80064e6:	9107      	str	r1, [sp, #28]
 80064e8:	9104      	str	r1, [sp, #16]
 80064ea:	4909      	ldr	r1, [pc, #36]	; (8006510 <siprintf+0x3c>)
 80064ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f0:	9105      	str	r1, [sp, #20]
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	a902      	add	r1, sp, #8
 80064f8:	f000 f868 	bl	80065cc <_svfiprintf_r>
 80064fc:	9b02      	ldr	r3, [sp, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	b01c      	add	sp, #112	; 0x70
 8006504:	f85d eb04 	ldr.w	lr, [sp], #4
 8006508:	b003      	add	sp, #12
 800650a:	4770      	bx	lr
 800650c:	24000010 	.word	0x24000010
 8006510:	ffff0208 	.word	0xffff0208

08006514 <__ssputs_r>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	688e      	ldr	r6, [r1, #8]
 800651a:	429e      	cmp	r6, r3
 800651c:	4682      	mov	sl, r0
 800651e:	460c      	mov	r4, r1
 8006520:	4690      	mov	r8, r2
 8006522:	461f      	mov	r7, r3
 8006524:	d838      	bhi.n	8006598 <__ssputs_r+0x84>
 8006526:	898a      	ldrh	r2, [r1, #12]
 8006528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800652c:	d032      	beq.n	8006594 <__ssputs_r+0x80>
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	6909      	ldr	r1, [r1, #16]
 8006532:	eba5 0901 	sub.w	r9, r5, r1
 8006536:	6965      	ldr	r5, [r4, #20]
 8006538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800653c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006540:	3301      	adds	r3, #1
 8006542:	444b      	add	r3, r9
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	429d      	cmp	r5, r3
 8006548:	bf38      	it	cc
 800654a:	461d      	movcc	r5, r3
 800654c:	0553      	lsls	r3, r2, #21
 800654e:	d531      	bpl.n	80065b4 <__ssputs_r+0xa0>
 8006550:	4629      	mov	r1, r5
 8006552:	f000 fb63 	bl	8006c1c <_malloc_r>
 8006556:	4606      	mov	r6, r0
 8006558:	b950      	cbnz	r0, 8006570 <__ssputs_r+0x5c>
 800655a:	230c      	movs	r3, #12
 800655c:	f8ca 3000 	str.w	r3, [sl]
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	6921      	ldr	r1, [r4, #16]
 8006572:	464a      	mov	r2, r9
 8006574:	f000 fabe 	bl	8006af4 <memcpy>
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	6126      	str	r6, [r4, #16]
 8006586:	6165      	str	r5, [r4, #20]
 8006588:	444e      	add	r6, r9
 800658a:	eba5 0509 	sub.w	r5, r5, r9
 800658e:	6026      	str	r6, [r4, #0]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	463e      	mov	r6, r7
 8006594:	42be      	cmp	r6, r7
 8006596:	d900      	bls.n	800659a <__ssputs_r+0x86>
 8006598:	463e      	mov	r6, r7
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	4632      	mov	r2, r6
 800659e:	4641      	mov	r1, r8
 80065a0:	f000 fab6 	bl	8006b10 <memmove>
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	1b9b      	subs	r3, r3, r6
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	4433      	add	r3, r6
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7db      	b.n	800656c <__ssputs_r+0x58>
 80065b4:	462a      	mov	r2, r5
 80065b6:	f000 fba5 	bl	8006d04 <_realloc_r>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1e1      	bne.n	8006584 <__ssputs_r+0x70>
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	4650      	mov	r0, sl
 80065c4:	f000 fabe 	bl	8006b44 <_free_r>
 80065c8:	e7c7      	b.n	800655a <__ssputs_r+0x46>
	...

080065cc <_svfiprintf_r>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4698      	mov	r8, r3
 80065d2:	898b      	ldrh	r3, [r1, #12]
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	b09d      	sub	sp, #116	; 0x74
 80065d8:	4607      	mov	r7, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	d50e      	bpl.n	80065fe <_svfiprintf_r+0x32>
 80065e0:	690b      	ldr	r3, [r1, #16]
 80065e2:	b963      	cbnz	r3, 80065fe <_svfiprintf_r+0x32>
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	f000 fb19 	bl	8006c1c <_malloc_r>
 80065ea:	6028      	str	r0, [r5, #0]
 80065ec:	6128      	str	r0, [r5, #16]
 80065ee:	b920      	cbnz	r0, 80065fa <_svfiprintf_r+0x2e>
 80065f0:	230c      	movs	r3, #12
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e0d1      	b.n	800679e <_svfiprintf_r+0x1d2>
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	616b      	str	r3, [r5, #20]
 80065fe:	2300      	movs	r3, #0
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	2320      	movs	r3, #32
 8006604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006608:	f8cd 800c 	str.w	r8, [sp, #12]
 800660c:	2330      	movs	r3, #48	; 0x30
 800660e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067b8 <_svfiprintf_r+0x1ec>
 8006612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	4623      	mov	r3, r4
 800661c:	469a      	mov	sl, r3
 800661e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006622:	b10a      	cbz	r2, 8006628 <_svfiprintf_r+0x5c>
 8006624:	2a25      	cmp	r2, #37	; 0x25
 8006626:	d1f9      	bne.n	800661c <_svfiprintf_r+0x50>
 8006628:	ebba 0b04 	subs.w	fp, sl, r4
 800662c:	d00b      	beq.n	8006646 <_svfiprintf_r+0x7a>
 800662e:	465b      	mov	r3, fp
 8006630:	4622      	mov	r2, r4
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff6d 	bl	8006514 <__ssputs_r>
 800663a:	3001      	adds	r0, #1
 800663c:	f000 80aa 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006642:	445a      	add	r2, fp
 8006644:	9209      	str	r2, [sp, #36]	; 0x24
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a2 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006650:	2300      	movs	r3, #0
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665a:	f10a 0a01 	add.w	sl, sl, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006666:	931a      	str	r3, [sp, #104]	; 0x68
 8006668:	4654      	mov	r4, sl
 800666a:	2205      	movs	r2, #5
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	4851      	ldr	r0, [pc, #324]	; (80067b8 <_svfiprintf_r+0x1ec>)
 8006672:	f7f9 fe3d 	bl	80002f0 <memchr>
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	b9d8      	cbnz	r0, 80066b2 <_svfiprintf_r+0xe6>
 800667a:	06d0      	lsls	r0, r2, #27
 800667c:	bf44      	itt	mi
 800667e:	2320      	movmi	r3, #32
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006684:	0711      	lsls	r1, r2, #28
 8006686:	bf44      	itt	mi
 8006688:	232b      	movmi	r3, #43	; 0x2b
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b2a      	cmp	r3, #42	; 0x2a
 8006694:	d015      	beq.n	80066c2 <_svfiprintf_r+0xf6>
 8006696:	9a07      	ldr	r2, [sp, #28]
 8006698:	4654      	mov	r4, sl
 800669a:	2000      	movs	r0, #0
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	4621      	mov	r1, r4
 80066a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a6:	3b30      	subs	r3, #48	; 0x30
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d94e      	bls.n	800674a <_svfiprintf_r+0x17e>
 80066ac:	b1b0      	cbz	r0, 80066dc <_svfiprintf_r+0x110>
 80066ae:	9207      	str	r2, [sp, #28]
 80066b0:	e014      	b.n	80066dc <_svfiprintf_r+0x110>
 80066b2:	eba0 0308 	sub.w	r3, r0, r8
 80066b6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	46a2      	mov	sl, r4
 80066c0:	e7d2      	b.n	8006668 <_svfiprintf_r+0x9c>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbb      	ittet	lt
 80066ce:	425b      	neglt	r3, r3
 80066d0:	f042 0202 	orrlt.w	r2, r2, #2
 80066d4:	9307      	strge	r3, [sp, #28]
 80066d6:	9307      	strlt	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	9204      	strlt	r2, [sp, #16]
 80066dc:	7823      	ldrb	r3, [r4, #0]
 80066de:	2b2e      	cmp	r3, #46	; 0x2e
 80066e0:	d10c      	bne.n	80066fc <_svfiprintf_r+0x130>
 80066e2:	7863      	ldrb	r3, [r4, #1]
 80066e4:	2b2a      	cmp	r3, #42	; 0x2a
 80066e6:	d135      	bne.n	8006754 <_svfiprintf_r+0x188>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d1a      	adds	r2, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9203      	str	r2, [sp, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfb8      	it	lt
 80066f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f8:	3402      	adds	r4, #2
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067c8 <_svfiprintf_r+0x1fc>
 8006700:	7821      	ldrb	r1, [r4, #0]
 8006702:	2203      	movs	r2, #3
 8006704:	4650      	mov	r0, sl
 8006706:	f7f9 fdf3 	bl	80002f0 <memchr>
 800670a:	b140      	cbz	r0, 800671e <_svfiprintf_r+0x152>
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	eba0 000a 	sub.w	r0, r0, sl
 8006712:	fa03 f000 	lsl.w	r0, r3, r0
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	4303      	orrs	r3, r0
 800671a:	3401      	adds	r4, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4826      	ldr	r0, [pc, #152]	; (80067bc <_svfiprintf_r+0x1f0>)
 8006724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006728:	2206      	movs	r2, #6
 800672a:	f7f9 fde1 	bl	80002f0 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d038      	beq.n	80067a4 <_svfiprintf_r+0x1d8>
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <_svfiprintf_r+0x1f4>)
 8006734:	bb1b      	cbnz	r3, 800677e <_svfiprintf_r+0x1b2>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	3307      	adds	r3, #7
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	3308      	adds	r3, #8
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006744:	4433      	add	r3, r6
 8006746:	9309      	str	r3, [sp, #36]	; 0x24
 8006748:	e767      	b.n	800661a <_svfiprintf_r+0x4e>
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	e7a5      	b.n	80066a0 <_svfiprintf_r+0xd4>
 8006754:	2300      	movs	r3, #0
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4620      	mov	r0, r4
 8006762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006766:	3a30      	subs	r2, #48	; 0x30
 8006768:	2a09      	cmp	r2, #9
 800676a:	d903      	bls.n	8006774 <_svfiprintf_r+0x1a8>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c5      	beq.n	80066fc <_svfiprintf_r+0x130>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e7c3      	b.n	80066fc <_svfiprintf_r+0x130>
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	e7f0      	b.n	8006760 <_svfiprintf_r+0x194>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <_svfiprintf_r+0x1f8>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4638      	mov	r0, r7
 800678a:	f3af 8000 	nop.w
 800678e:	1c42      	adds	r2, r0, #1
 8006790:	4606      	mov	r6, r0
 8006792:	d1d6      	bne.n	8006742 <_svfiprintf_r+0x176>
 8006794:	89ab      	ldrh	r3, [r5, #12]
 8006796:	065b      	lsls	r3, r3, #25
 8006798:	f53f af2c 	bmi.w	80065f4 <_svfiprintf_r+0x28>
 800679c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800679e:	b01d      	add	sp, #116	; 0x74
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <_svfiprintf_r+0x1f8>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4638      	mov	r0, r7
 80067b0:	f000 f87a 	bl	80068a8 <_printf_i>
 80067b4:	e7eb      	b.n	800678e <_svfiprintf_r+0x1c2>
 80067b6:	bf00      	nop
 80067b8:	08006e20 	.word	0x08006e20
 80067bc:	08006e2a 	.word	0x08006e2a
 80067c0:	00000000 	.word	0x00000000
 80067c4:	08006515 	.word	0x08006515
 80067c8:	08006e26 	.word	0x08006e26

080067cc <_printf_common>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	4616      	mov	r6, r2
 80067d2:	4699      	mov	r9, r3
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfb8      	it	lt
 80067e0:	4613      	movlt	r3, r2
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067e8:	4607      	mov	r7, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b10a      	cbz	r2, 80067f2 <_printf_common+0x26>
 80067ee:	3301      	adds	r3, #1
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	0699      	lsls	r1, r3, #26
 80067f6:	bf42      	ittt	mi
 80067f8:	6833      	ldrmi	r3, [r6, #0]
 80067fa:	3302      	addmi	r3, #2
 80067fc:	6033      	strmi	r3, [r6, #0]
 80067fe:	6825      	ldr	r5, [r4, #0]
 8006800:	f015 0506 	ands.w	r5, r5, #6
 8006804:	d106      	bne.n	8006814 <_printf_common+0x48>
 8006806:	f104 0a19 	add.w	sl, r4, #25
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	6832      	ldr	r2, [r6, #0]
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	42ab      	cmp	r3, r5
 8006812:	dc26      	bgt.n	8006862 <_printf_common+0x96>
 8006814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006818:	1e13      	subs	r3, r2, #0
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	bf18      	it	ne
 800681e:	2301      	movne	r3, #1
 8006820:	0692      	lsls	r2, r2, #26
 8006822:	d42b      	bmi.n	800687c <_printf_common+0xb0>
 8006824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d01e      	beq.n	8006870 <_printf_common+0xa4>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	68e5      	ldr	r5, [r4, #12]
 8006836:	6832      	ldr	r2, [r6, #0]
 8006838:	f003 0306 	and.w	r3, r3, #6
 800683c:	2b04      	cmp	r3, #4
 800683e:	bf08      	it	eq
 8006840:	1aad      	subeq	r5, r5, r2
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	bf0c      	ite	eq
 8006848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800684c:	2500      	movne	r5, #0
 800684e:	4293      	cmp	r3, r2
 8006850:	bfc4      	itt	gt
 8006852:	1a9b      	subgt	r3, r3, r2
 8006854:	18ed      	addgt	r5, r5, r3
 8006856:	2600      	movs	r6, #0
 8006858:	341a      	adds	r4, #26
 800685a:	42b5      	cmp	r5, r6
 800685c:	d11a      	bne.n	8006894 <_printf_common+0xc8>
 800685e:	2000      	movs	r0, #0
 8006860:	e008      	b.n	8006874 <_printf_common+0xa8>
 8006862:	2301      	movs	r3, #1
 8006864:	4652      	mov	r2, sl
 8006866:	4649      	mov	r1, r9
 8006868:	4638      	mov	r0, r7
 800686a:	47c0      	blx	r8
 800686c:	3001      	adds	r0, #1
 800686e:	d103      	bne.n	8006878 <_printf_common+0xac>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	3501      	adds	r5, #1
 800687a:	e7c6      	b.n	800680a <_printf_common+0x3e>
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	2030      	movs	r0, #48	; 0x30
 8006882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006886:	4422      	add	r2, r4
 8006888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800688c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006890:	3302      	adds	r3, #2
 8006892:	e7c7      	b.n	8006824 <_printf_common+0x58>
 8006894:	2301      	movs	r3, #1
 8006896:	4622      	mov	r2, r4
 8006898:	4649      	mov	r1, r9
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d0e6      	beq.n	8006870 <_printf_common+0xa4>
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7d9      	b.n	800685a <_printf_common+0x8e>
	...

080068a8 <_printf_i>:
 80068a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	7e0f      	ldrb	r7, [r1, #24]
 80068ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068b0:	2f78      	cmp	r7, #120	; 0x78
 80068b2:	4691      	mov	r9, r2
 80068b4:	4680      	mov	r8, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	469a      	mov	sl, r3
 80068ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068be:	d807      	bhi.n	80068d0 <_printf_i+0x28>
 80068c0:	2f62      	cmp	r7, #98	; 0x62
 80068c2:	d80a      	bhi.n	80068da <_printf_i+0x32>
 80068c4:	2f00      	cmp	r7, #0
 80068c6:	f000 80d8 	beq.w	8006a7a <_printf_i+0x1d2>
 80068ca:	2f58      	cmp	r7, #88	; 0x58
 80068cc:	f000 80a3 	beq.w	8006a16 <_printf_i+0x16e>
 80068d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068d8:	e03a      	b.n	8006950 <_printf_i+0xa8>
 80068da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068de:	2b15      	cmp	r3, #21
 80068e0:	d8f6      	bhi.n	80068d0 <_printf_i+0x28>
 80068e2:	a101      	add	r1, pc, #4	; (adr r1, 80068e8 <_printf_i+0x40>)
 80068e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006955 	.word	0x08006955
 80068f0:	080068d1 	.word	0x080068d1
 80068f4:	080068d1 	.word	0x080068d1
 80068f8:	080068d1 	.word	0x080068d1
 80068fc:	080068d1 	.word	0x080068d1
 8006900:	08006955 	.word	0x08006955
 8006904:	080068d1 	.word	0x080068d1
 8006908:	080068d1 	.word	0x080068d1
 800690c:	080068d1 	.word	0x080068d1
 8006910:	080068d1 	.word	0x080068d1
 8006914:	08006a61 	.word	0x08006a61
 8006918:	08006985 	.word	0x08006985
 800691c:	08006a43 	.word	0x08006a43
 8006920:	080068d1 	.word	0x080068d1
 8006924:	080068d1 	.word	0x080068d1
 8006928:	08006a83 	.word	0x08006a83
 800692c:	080068d1 	.word	0x080068d1
 8006930:	08006985 	.word	0x08006985
 8006934:	080068d1 	.word	0x080068d1
 8006938:	080068d1 	.word	0x080068d1
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800694c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006950:	2301      	movs	r3, #1
 8006952:	e0a3      	b.n	8006a9c <_printf_i+0x1f4>
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	6829      	ldr	r1, [r5, #0]
 8006958:	0606      	lsls	r6, r0, #24
 800695a:	f101 0304 	add.w	r3, r1, #4
 800695e:	d50a      	bpl.n	8006976 <_printf_i+0xce>
 8006960:	680e      	ldr	r6, [r1, #0]
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	2e00      	cmp	r6, #0
 8006966:	da03      	bge.n	8006970 <_printf_i+0xc8>
 8006968:	232d      	movs	r3, #45	; 0x2d
 800696a:	4276      	negs	r6, r6
 800696c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006970:	485e      	ldr	r0, [pc, #376]	; (8006aec <_printf_i+0x244>)
 8006972:	230a      	movs	r3, #10
 8006974:	e019      	b.n	80069aa <_printf_i+0x102>
 8006976:	680e      	ldr	r6, [r1, #0]
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800697e:	bf18      	it	ne
 8006980:	b236      	sxthne	r6, r6
 8006982:	e7ef      	b.n	8006964 <_printf_i+0xbc>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	6820      	ldr	r0, [r4, #0]
 8006988:	1d19      	adds	r1, r3, #4
 800698a:	6029      	str	r1, [r5, #0]
 800698c:	0601      	lsls	r1, r0, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xec>
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0xf2>
 8006994:	0646      	lsls	r6, r0, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xe8>
 8006998:	881e      	ldrh	r6, [r3, #0]
 800699a:	4854      	ldr	r0, [pc, #336]	; (8006aec <_printf_i+0x244>)
 800699c:	2f6f      	cmp	r7, #111	; 0x6f
 800699e:	bf0c      	ite	eq
 80069a0:	2308      	moveq	r3, #8
 80069a2:	230a      	movne	r3, #10
 80069a4:	2100      	movs	r1, #0
 80069a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069aa:	6865      	ldr	r5, [r4, #4]
 80069ac:	60a5      	str	r5, [r4, #8]
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	bfa2      	ittt	ge
 80069b2:	6821      	ldrge	r1, [r4, #0]
 80069b4:	f021 0104 	bicge.w	r1, r1, #4
 80069b8:	6021      	strge	r1, [r4, #0]
 80069ba:	b90e      	cbnz	r6, 80069c0 <_printf_i+0x118>
 80069bc:	2d00      	cmp	r5, #0
 80069be:	d04d      	beq.n	8006a5c <_printf_i+0x1b4>
 80069c0:	4615      	mov	r5, r2
 80069c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80069c6:	fb03 6711 	mls	r7, r3, r1, r6
 80069ca:	5dc7      	ldrb	r7, [r0, r7]
 80069cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069d0:	4637      	mov	r7, r6
 80069d2:	42bb      	cmp	r3, r7
 80069d4:	460e      	mov	r6, r1
 80069d6:	d9f4      	bls.n	80069c2 <_printf_i+0x11a>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10b      	bne.n	80069f4 <_printf_i+0x14c>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	07de      	lsls	r6, r3, #31
 80069e0:	d508      	bpl.n	80069f4 <_printf_i+0x14c>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	bfde      	ittt	le
 80069ea:	2330      	movle	r3, #48	; 0x30
 80069ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069f4:	1b52      	subs	r2, r2, r5
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	f8cd a000 	str.w	sl, [sp]
 80069fc:	464b      	mov	r3, r9
 80069fe:	aa03      	add	r2, sp, #12
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fee2 	bl	80067cc <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d14c      	bne.n	8006aa6 <_printf_i+0x1fe>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b004      	add	sp, #16
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	4835      	ldr	r0, [pc, #212]	; (8006aec <_printf_i+0x244>)
 8006a18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a1c:	6829      	ldr	r1, [r5, #0]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a24:	6029      	str	r1, [r5, #0]
 8006a26:	061d      	lsls	r5, r3, #24
 8006a28:	d514      	bpl.n	8006a54 <_printf_i+0x1ac>
 8006a2a:	07df      	lsls	r7, r3, #31
 8006a2c:	bf44      	itt	mi
 8006a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a32:	6023      	strmi	r3, [r4, #0]
 8006a34:	b91e      	cbnz	r6, 8006a3e <_printf_i+0x196>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2310      	movs	r3, #16
 8006a40:	e7b0      	b.n	80069a4 <_printf_i+0xfc>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	2378      	movs	r3, #120	; 0x78
 8006a4c:	4828      	ldr	r0, [pc, #160]	; (8006af0 <_printf_i+0x248>)
 8006a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a52:	e7e3      	b.n	8006a1c <_printf_i+0x174>
 8006a54:	0659      	lsls	r1, r3, #25
 8006a56:	bf48      	it	mi
 8006a58:	b2b6      	uxthmi	r6, r6
 8006a5a:	e7e6      	b.n	8006a2a <_printf_i+0x182>
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	e7bb      	b.n	80069d8 <_printf_i+0x130>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	6961      	ldr	r1, [r4, #20]
 8006a66:	1d18      	adds	r0, r3, #4
 8006a68:	6028      	str	r0, [r5, #0]
 8006a6a:	0635      	lsls	r5, r6, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1cc>
 8006a70:	6019      	str	r1, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1d2>
 8006a74:	0670      	lsls	r0, r6, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1c8>
 8006a78:	8019      	strh	r1, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4615      	mov	r5, r2
 8006a80:	e7ba      	b.n	80069f8 <_printf_i+0x150>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	602a      	str	r2, [r5, #0]
 8006a88:	681d      	ldr	r5, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f7f9 fc2e 	bl	80002f0 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1f2>
 8006a96:	1b40      	subs	r0, r0, r5
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	e7a8      	b.n	80069f8 <_printf_i+0x150>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ab      	beq.n	8006a0c <_printf_i+0x164>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x23a>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a4      	b.n	8006a10 <_printf_i+0x168>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09b      	beq.n	8006a0c <_printf_i+0x164>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x21e>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x212>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x22e>
 8006aea:	bf00      	nop
 8006aec:	08006e31 	.word	0x08006e31
 8006af0:	08006e42 	.word	0x08006e42

08006af4 <memcpy>:
 8006af4:	440a      	add	r2, r1
 8006af6:	4291      	cmp	r1, r2
 8006af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006afc:	d100      	bne.n	8006b00 <memcpy+0xc>
 8006afe:	4770      	bx	lr
 8006b00:	b510      	push	{r4, lr}
 8006b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	d1f9      	bne.n	8006b02 <memcpy+0xe>
 8006b0e:	bd10      	pop	{r4, pc}

08006b10 <memmove>:
 8006b10:	4288      	cmp	r0, r1
 8006b12:	b510      	push	{r4, lr}
 8006b14:	eb01 0402 	add.w	r4, r1, r2
 8006b18:	d902      	bls.n	8006b20 <memmove+0x10>
 8006b1a:	4284      	cmp	r4, r0
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	d807      	bhi.n	8006b30 <memmove+0x20>
 8006b20:	1e43      	subs	r3, r0, #1
 8006b22:	42a1      	cmp	r1, r4
 8006b24:	d008      	beq.n	8006b38 <memmove+0x28>
 8006b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b2e:	e7f8      	b.n	8006b22 <memmove+0x12>
 8006b30:	4402      	add	r2, r0
 8006b32:	4601      	mov	r1, r0
 8006b34:	428a      	cmp	r2, r1
 8006b36:	d100      	bne.n	8006b3a <memmove+0x2a>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b42:	e7f7      	b.n	8006b34 <memmove+0x24>

08006b44 <_free_r>:
 8006b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d044      	beq.n	8006bd4 <_free_r+0x90>
 8006b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4e:	9001      	str	r0, [sp, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f1a1 0404 	sub.w	r4, r1, #4
 8006b56:	bfb8      	it	lt
 8006b58:	18e4      	addlt	r4, r4, r3
 8006b5a:	f000 f913 	bl	8006d84 <__malloc_lock>
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <_free_r+0x94>)
 8006b60:	9801      	ldr	r0, [sp, #4]
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	b933      	cbnz	r3, 8006b74 <_free_r+0x30>
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	6014      	str	r4, [r2, #0]
 8006b6a:	b003      	add	sp, #12
 8006b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b70:	f000 b90e 	b.w	8006d90 <__malloc_unlock>
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d908      	bls.n	8006b8a <_free_r+0x46>
 8006b78:	6825      	ldr	r5, [r4, #0]
 8006b7a:	1961      	adds	r1, r4, r5
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	bf01      	itttt	eq
 8006b80:	6819      	ldreq	r1, [r3, #0]
 8006b82:	685b      	ldreq	r3, [r3, #4]
 8006b84:	1949      	addeq	r1, r1, r5
 8006b86:	6021      	streq	r1, [r4, #0]
 8006b88:	e7ed      	b.n	8006b66 <_free_r+0x22>
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	b10b      	cbz	r3, 8006b94 <_free_r+0x50>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d9fa      	bls.n	8006b8a <_free_r+0x46>
 8006b94:	6811      	ldr	r1, [r2, #0]
 8006b96:	1855      	adds	r5, r2, r1
 8006b98:	42a5      	cmp	r5, r4
 8006b9a:	d10b      	bne.n	8006bb4 <_free_r+0x70>
 8006b9c:	6824      	ldr	r4, [r4, #0]
 8006b9e:	4421      	add	r1, r4
 8006ba0:	1854      	adds	r4, r2, r1
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	6011      	str	r1, [r2, #0]
 8006ba6:	d1e0      	bne.n	8006b6a <_free_r+0x26>
 8006ba8:	681c      	ldr	r4, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	6053      	str	r3, [r2, #4]
 8006bae:	4421      	add	r1, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	e7da      	b.n	8006b6a <_free_r+0x26>
 8006bb4:	d902      	bls.n	8006bbc <_free_r+0x78>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	e7d6      	b.n	8006b6a <_free_r+0x26>
 8006bbc:	6825      	ldr	r5, [r4, #0]
 8006bbe:	1961      	adds	r1, r4, r5
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf04      	itt	eq
 8006bc4:	6819      	ldreq	r1, [r3, #0]
 8006bc6:	685b      	ldreq	r3, [r3, #4]
 8006bc8:	6063      	str	r3, [r4, #4]
 8006bca:	bf04      	itt	eq
 8006bcc:	1949      	addeq	r1, r1, r5
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	6054      	str	r4, [r2, #4]
 8006bd2:	e7ca      	b.n	8006b6a <_free_r+0x26>
 8006bd4:	b003      	add	sp, #12
 8006bd6:	bd30      	pop	{r4, r5, pc}
 8006bd8:	24000174 	.word	0x24000174

08006bdc <sbrk_aligned>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0e      	ldr	r6, [pc, #56]	; (8006c18 <sbrk_aligned+0x3c>)
 8006be0:	460c      	mov	r4, r1
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	b911      	cbnz	r1, 8006bee <sbrk_aligned+0x12>
 8006be8:	f000 f8bc 	bl	8006d64 <_sbrk_r>
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f8b7 	bl	8006d64 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d00a      	beq.n	8006c10 <sbrk_aligned+0x34>
 8006bfa:	1cc4      	adds	r4, r0, #3
 8006bfc:	f024 0403 	bic.w	r4, r4, #3
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d007      	beq.n	8006c14 <sbrk_aligned+0x38>
 8006c04:	1a21      	subs	r1, r4, r0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f8ac 	bl	8006d64 <_sbrk_r>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d101      	bne.n	8006c14 <sbrk_aligned+0x38>
 8006c10:	f04f 34ff 	mov.w	r4, #4294967295
 8006c14:	4620      	mov	r0, r4
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	24000178 	.word	0x24000178

08006c1c <_malloc_r>:
 8006c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	1ccd      	adds	r5, r1, #3
 8006c22:	f025 0503 	bic.w	r5, r5, #3
 8006c26:	3508      	adds	r5, #8
 8006c28:	2d0c      	cmp	r5, #12
 8006c2a:	bf38      	it	cc
 8006c2c:	250c      	movcc	r5, #12
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	4607      	mov	r7, r0
 8006c32:	db01      	blt.n	8006c38 <_malloc_r+0x1c>
 8006c34:	42a9      	cmp	r1, r5
 8006c36:	d905      	bls.n	8006c44 <_malloc_r+0x28>
 8006c38:	230c      	movs	r3, #12
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	4630      	mov	r0, r6
 8006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c44:	4e2e      	ldr	r6, [pc, #184]	; (8006d00 <_malloc_r+0xe4>)
 8006c46:	f000 f89d 	bl	8006d84 <__malloc_lock>
 8006c4a:	6833      	ldr	r3, [r6, #0]
 8006c4c:	461c      	mov	r4, r3
 8006c4e:	bb34      	cbnz	r4, 8006c9e <_malloc_r+0x82>
 8006c50:	4629      	mov	r1, r5
 8006c52:	4638      	mov	r0, r7
 8006c54:	f7ff ffc2 	bl	8006bdc <sbrk_aligned>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	d14d      	bne.n	8006cfa <_malloc_r+0xde>
 8006c5e:	6834      	ldr	r4, [r6, #0]
 8006c60:	4626      	mov	r6, r4
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d140      	bne.n	8006ce8 <_malloc_r+0xcc>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	eb04 0803 	add.w	r8, r4, r3
 8006c70:	f000 f878 	bl	8006d64 <_sbrk_r>
 8006c74:	4580      	cmp	r8, r0
 8006c76:	d13a      	bne.n	8006cee <_malloc_r+0xd2>
 8006c78:	6821      	ldr	r1, [r4, #0]
 8006c7a:	3503      	adds	r5, #3
 8006c7c:	1a6d      	subs	r5, r5, r1
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7ff ffa5 	bl	8006bdc <sbrk_aligned>
 8006c92:	3001      	adds	r0, #1
 8006c94:	d02b      	beq.n	8006cee <_malloc_r+0xd2>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	442b      	add	r3, r5
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	e00e      	b.n	8006cbc <_malloc_r+0xa0>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	1b52      	subs	r2, r2, r5
 8006ca2:	d41e      	bmi.n	8006ce2 <_malloc_r+0xc6>
 8006ca4:	2a0b      	cmp	r2, #11
 8006ca6:	d916      	bls.n	8006cd6 <_malloc_r+0xba>
 8006ca8:	1961      	adds	r1, r4, r5
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	6025      	str	r5, [r4, #0]
 8006cae:	bf18      	it	ne
 8006cb0:	6059      	strne	r1, [r3, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	bf08      	it	eq
 8006cb6:	6031      	streq	r1, [r6, #0]
 8006cb8:	5162      	str	r2, [r4, r5]
 8006cba:	604b      	str	r3, [r1, #4]
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f104 060b 	add.w	r6, r4, #11
 8006cc2:	f000 f865 	bl	8006d90 <__malloc_unlock>
 8006cc6:	f026 0607 	bic.w	r6, r6, #7
 8006cca:	1d23      	adds	r3, r4, #4
 8006ccc:	1af2      	subs	r2, r6, r3
 8006cce:	d0b6      	beq.n	8006c3e <_malloc_r+0x22>
 8006cd0:	1b9b      	subs	r3, r3, r6
 8006cd2:	50a3      	str	r3, [r4, r2]
 8006cd4:	e7b3      	b.n	8006c3e <_malloc_r+0x22>
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	bf0c      	ite	eq
 8006cdc:	6032      	streq	r2, [r6, #0]
 8006cde:	605a      	strne	r2, [r3, #4]
 8006ce0:	e7ec      	b.n	8006cbc <_malloc_r+0xa0>
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	6864      	ldr	r4, [r4, #4]
 8006ce6:	e7b2      	b.n	8006c4e <_malloc_r+0x32>
 8006ce8:	4634      	mov	r4, r6
 8006cea:	6876      	ldr	r6, [r6, #4]
 8006cec:	e7b9      	b.n	8006c62 <_malloc_r+0x46>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f000 f84c 	bl	8006d90 <__malloc_unlock>
 8006cf8:	e7a1      	b.n	8006c3e <_malloc_r+0x22>
 8006cfa:	6025      	str	r5, [r4, #0]
 8006cfc:	e7de      	b.n	8006cbc <_malloc_r+0xa0>
 8006cfe:	bf00      	nop
 8006d00:	24000174 	.word	0x24000174

08006d04 <_realloc_r>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	4680      	mov	r8, r0
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	460e      	mov	r6, r1
 8006d0e:	b921      	cbnz	r1, 8006d1a <_realloc_r+0x16>
 8006d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d14:	4611      	mov	r1, r2
 8006d16:	f7ff bf81 	b.w	8006c1c <_malloc_r>
 8006d1a:	b92a      	cbnz	r2, 8006d28 <_realloc_r+0x24>
 8006d1c:	f7ff ff12 	bl	8006b44 <_free_r>
 8006d20:	4625      	mov	r5, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d28:	f000 f838 	bl	8006d9c <_malloc_usable_size_r>
 8006d2c:	4284      	cmp	r4, r0
 8006d2e:	4607      	mov	r7, r0
 8006d30:	d802      	bhi.n	8006d38 <_realloc_r+0x34>
 8006d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d36:	d812      	bhi.n	8006d5e <_realloc_r+0x5a>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f7ff ff6e 	bl	8006c1c <_malloc_r>
 8006d40:	4605      	mov	r5, r0
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0ed      	beq.n	8006d22 <_realloc_r+0x1e>
 8006d46:	42bc      	cmp	r4, r7
 8006d48:	4622      	mov	r2, r4
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	bf28      	it	cs
 8006d4e:	463a      	movcs	r2, r7
 8006d50:	f7ff fed0 	bl	8006af4 <memcpy>
 8006d54:	4631      	mov	r1, r6
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff fef4 	bl	8006b44 <_free_r>
 8006d5c:	e7e1      	b.n	8006d22 <_realloc_r+0x1e>
 8006d5e:	4635      	mov	r5, r6
 8006d60:	e7df      	b.n	8006d22 <_realloc_r+0x1e>
	...

08006d64 <_sbrk_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d06      	ldr	r5, [pc, #24]	; (8006d80 <_sbrk_r+0x1c>)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	f7fa fada 	bl	8001328 <_sbrk>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_sbrk_r+0x1a>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_sbrk_r+0x1a>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	2400017c 	.word	0x2400017c

08006d84 <__malloc_lock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__malloc_lock+0x8>)
 8006d86:	f000 b811 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	24000180 	.word	0x24000180

08006d90 <__malloc_unlock>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__malloc_unlock+0x8>)
 8006d92:	f000 b80c 	b.w	8006dae <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	24000180 	.word	0x24000180

08006d9c <_malloc_usable_size_r>:
 8006d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da0:	1f18      	subs	r0, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfbc      	itt	lt
 8006da6:	580b      	ldrlt	r3, [r1, r0]
 8006da8:	18c0      	addlt	r0, r0, r3
 8006daa:	4770      	bx	lr

08006dac <__retarget_lock_acquire_recursive>:
 8006dac:	4770      	bx	lr

08006dae <__retarget_lock_release_recursive>:
 8006dae:	4770      	bx	lr

08006db0 <_init>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr

08006dbc <_fini>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr
